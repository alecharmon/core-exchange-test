# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.payment_network_type import PaymentNetworkType
from openapi_server import util

from openapi_server.models.payment_network_type import PaymentNetworkType  # noqa: E501

class AccountPaymentNetwork(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, bank_id=None, identifier=None, type=None, transfer_in=None, transfer_out=None):  # noqa: E501
        """AccountPaymentNetwork - a model defined in OpenAPI

        :param bank_id: The bank_id of this AccountPaymentNetwork.  # noqa: E501
        :type bank_id: str
        :param identifier: The identifier of this AccountPaymentNetwork.  # noqa: E501
        :type identifier: str
        :param type: The type of this AccountPaymentNetwork.  # noqa: E501
        :type type: PaymentNetworkType
        :param transfer_in: The transfer_in of this AccountPaymentNetwork.  # noqa: E501
        :type transfer_in: bool
        :param transfer_out: The transfer_out of this AccountPaymentNetwork.  # noqa: E501
        :type transfer_out: bool
        """
        self.openapi_types = {
            'bank_id': str,
            'identifier': str,
            'type': PaymentNetworkType,
            'transfer_in': bool,
            'transfer_out': bool
        }

        self.attribute_map = {
            'bank_id': 'bankId',
            'identifier': 'identifier',
            'type': 'type',
            'transfer_in': 'transferIn',
            'transfer_out': 'transferOut'
        }

        self._bank_id = bank_id
        self._identifier = identifier
        self._type = type
        self._transfer_in = transfer_in
        self._transfer_out = transfer_out

    @classmethod
    def from_dict(cls, dikt) -> 'AccountPaymentNetwork':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The AccountPaymentNetwork of this AccountPaymentNetwork.  # noqa: E501
        :rtype: AccountPaymentNetwork
        """
        return util.deserialize_model(dikt, cls)

    @property
    def bank_id(self):
        """Gets the bank_id of this AccountPaymentNetwork.

        Bank identifier used by the payment network ie. Routing Number  # noqa: E501

        :return: The bank_id of this AccountPaymentNetwork.
        :rtype: str
        """
        return self._bank_id

    @bank_id.setter
    def bank_id(self, bank_id):
        """Sets the bank_id of this AccountPaymentNetwork.

        Bank identifier used by the payment network ie. Routing Number  # noqa: E501

        :param bank_id: The bank_id of this AccountPaymentNetwork.
        :type bank_id: str
        """
        if bank_id is None:
            raise ValueError("Invalid value for `bank_id`, must not be `None`")  # noqa: E501

        self._bank_id = bank_id

    @property
    def identifier(self):
        """Gets the identifier of this AccountPaymentNetwork.

        The number used to identify the account within the payment network.  # noqa: E501

        :return: The identifier of this AccountPaymentNetwork.
        :rtype: str
        """
        return self._identifier

    @identifier.setter
    def identifier(self, identifier):
        """Sets the identifier of this AccountPaymentNetwork.

        The number used to identify the account within the payment network.  # noqa: E501

        :param identifier: The identifier of this AccountPaymentNetwork.
        :type identifier: str
        """
        if identifier is None:
            raise ValueError("Invalid value for `identifier`, must not be `None`")  # noqa: E501

        self._identifier = identifier

    @property
    def type(self):
        """Gets the type of this AccountPaymentNetwork.


        :return: The type of this AccountPaymentNetwork.
        :rtype: PaymentNetworkType
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this AccountPaymentNetwork.


        :param type: The type of this AccountPaymentNetwork.
        :type type: PaymentNetworkType
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    @property
    def transfer_in(self):
        """Gets the transfer_in of this AccountPaymentNetwork.

        Can transfer funds to the account using this information. Plaid expect that this value represents the account's current ability to be credited through a payment network. Plaid recommends dynamically updating this value, for example to represent if the account is locked or not.   # noqa: E501

        :return: The transfer_in of this AccountPaymentNetwork.
        :rtype: bool
        """
        return self._transfer_in

    @transfer_in.setter
    def transfer_in(self, transfer_in):
        """Sets the transfer_in of this AccountPaymentNetwork.

        Can transfer funds to the account using this information. Plaid expect that this value represents the account's current ability to be credited through a payment network. Plaid recommends dynamically updating this value, for example to represent if the account is locked or not.   # noqa: E501

        :param transfer_in: The transfer_in of this AccountPaymentNetwork.
        :type transfer_in: bool
        """
        if transfer_in is None:
            raise ValueError("Invalid value for `transfer_in`, must not be `None`")  # noqa: E501

        self._transfer_in = transfer_in

    @property
    def transfer_out(self):
        """Gets the transfer_out of this AccountPaymentNetwork.

        Can transfer funds from the account using this information. Plaid expect that this value represents the account's current ability to be debited through a payment network. Plaid recommends dynamically updating this value, for example to represent if the account is locked or not.   # noqa: E501

        :return: The transfer_out of this AccountPaymentNetwork.
        :rtype: bool
        """
        return self._transfer_out

    @transfer_out.setter
    def transfer_out(self, transfer_out):
        """Sets the transfer_out of this AccountPaymentNetwork.

        Can transfer funds from the account using this information. Plaid expect that this value represents the account's current ability to be debited through a payment network. Plaid recommends dynamically updating this value, for example to represent if the account is locked or not.   # noqa: E501

        :param transfer_out: The transfer_out of this AccountPaymentNetwork.
        :type transfer_out: bool
        """
        if transfer_out is None:
            raise ValueError("Invalid value for `transfer_out`, must not be `None`")  # noqa: E501

        self._transfer_out = transfer_out
