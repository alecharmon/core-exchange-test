# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.account_descriptor import AccountDescriptor
from openapi_server.models.account_with_descriptor_one_of import AccountWithDescriptorOneOf
from openapi_server.models.account_with_descriptor_one_of1 import AccountWithDescriptorOneOf1
from openapi_server.models.account_with_descriptor_one_of2 import AccountWithDescriptorOneOf2
from openapi_server.models.account_with_descriptor_one_of3 import AccountWithDescriptorOneOf3
from openapi_server.models.account_with_descriptor_one_of4 import AccountWithDescriptorOneOf4
from openapi_server.models.account_with_descriptor_one_of5 import AccountWithDescriptorOneOf5
from openapi_server import util

from openapi_server.models.account_descriptor import AccountDescriptor  # noqa: E501
from openapi_server.models.account_with_descriptor_one_of import AccountWithDescriptorOneOf  # noqa: E501
from openapi_server.models.account_with_descriptor_one_of1 import AccountWithDescriptorOneOf1  # noqa: E501
from openapi_server.models.account_with_descriptor_one_of2 import AccountWithDescriptorOneOf2  # noqa: E501
from openapi_server.models.account_with_descriptor_one_of3 import AccountWithDescriptorOneOf3  # noqa: E501
from openapi_server.models.account_with_descriptor_one_of4 import AccountWithDescriptorOneOf4  # noqa: E501
from openapi_server.models.account_with_descriptor_one_of5 import AccountWithDescriptorOneOf5  # noqa: E501

class AccountWithDescriptor(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, deposit_account=None, loan_account=None, loc_account=None, investment_account=None, insurance_account=None, annuity_account=None):  # noqa: E501
        """AccountWithDescriptor - a model defined in OpenAPI

        :param deposit_account: The deposit_account of this AccountWithDescriptor.  # noqa: E501
        :type deposit_account: AccountDescriptor
        :param loan_account: The loan_account of this AccountWithDescriptor.  # noqa: E501
        :type loan_account: AccountDescriptor
        :param loc_account: The loc_account of this AccountWithDescriptor.  # noqa: E501
        :type loc_account: AccountDescriptor
        :param investment_account: The investment_account of this AccountWithDescriptor.  # noqa: E501
        :type investment_account: AccountDescriptor
        :param insurance_account: The insurance_account of this AccountWithDescriptor.  # noqa: E501
        :type insurance_account: AccountDescriptor
        :param annuity_account: The annuity_account of this AccountWithDescriptor.  # noqa: E501
        :type annuity_account: AccountDescriptor
        """
        self.openapi_types = {
            'deposit_account': AccountDescriptor,
            'loan_account': AccountDescriptor,
            'loc_account': AccountDescriptor,
            'investment_account': AccountDescriptor,
            'insurance_account': AccountDescriptor,
            'annuity_account': AccountDescriptor
        }

        self.attribute_map = {
            'deposit_account': 'depositAccount',
            'loan_account': 'loanAccount',
            'loc_account': 'locAccount',
            'investment_account': 'investmentAccount',
            'insurance_account': 'insuranceAccount',
            'annuity_account': 'annuityAccount'
        }

        self._deposit_account = deposit_account
        self._loan_account = loan_account
        self._loc_account = loc_account
        self._investment_account = investment_account
        self._insurance_account = insurance_account
        self._annuity_account = annuity_account

    @classmethod
    def from_dict(cls, dikt) -> 'AccountWithDescriptor':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The AccountWithDescriptor of this AccountWithDescriptor.  # noqa: E501
        :rtype: AccountWithDescriptor
        """
        return util.deserialize_model(dikt, cls)

    @property
    def deposit_account(self):
        """Gets the deposit_account of this AccountWithDescriptor.


        :return: The deposit_account of this AccountWithDescriptor.
        :rtype: AccountDescriptor
        """
        return self._deposit_account

    @deposit_account.setter
    def deposit_account(self, deposit_account):
        """Sets the deposit_account of this AccountWithDescriptor.


        :param deposit_account: The deposit_account of this AccountWithDescriptor.
        :type deposit_account: AccountDescriptor
        """
        if deposit_account is None:
            raise ValueError("Invalid value for `deposit_account`, must not be `None`")  # noqa: E501

        self._deposit_account = deposit_account

    @property
    def loan_account(self):
        """Gets the loan_account of this AccountWithDescriptor.


        :return: The loan_account of this AccountWithDescriptor.
        :rtype: AccountDescriptor
        """
        return self._loan_account

    @loan_account.setter
    def loan_account(self, loan_account):
        """Sets the loan_account of this AccountWithDescriptor.


        :param loan_account: The loan_account of this AccountWithDescriptor.
        :type loan_account: AccountDescriptor
        """
        if loan_account is None:
            raise ValueError("Invalid value for `loan_account`, must not be `None`")  # noqa: E501

        self._loan_account = loan_account

    @property
    def loc_account(self):
        """Gets the loc_account of this AccountWithDescriptor.


        :return: The loc_account of this AccountWithDescriptor.
        :rtype: AccountDescriptor
        """
        return self._loc_account

    @loc_account.setter
    def loc_account(self, loc_account):
        """Sets the loc_account of this AccountWithDescriptor.


        :param loc_account: The loc_account of this AccountWithDescriptor.
        :type loc_account: AccountDescriptor
        """
        if loc_account is None:
            raise ValueError("Invalid value for `loc_account`, must not be `None`")  # noqa: E501

        self._loc_account = loc_account

    @property
    def investment_account(self):
        """Gets the investment_account of this AccountWithDescriptor.


        :return: The investment_account of this AccountWithDescriptor.
        :rtype: AccountDescriptor
        """
        return self._investment_account

    @investment_account.setter
    def investment_account(self, investment_account):
        """Sets the investment_account of this AccountWithDescriptor.


        :param investment_account: The investment_account of this AccountWithDescriptor.
        :type investment_account: AccountDescriptor
        """
        if investment_account is None:
            raise ValueError("Invalid value for `investment_account`, must not be `None`")  # noqa: E501

        self._investment_account = investment_account

    @property
    def insurance_account(self):
        """Gets the insurance_account of this AccountWithDescriptor.


        :return: The insurance_account of this AccountWithDescriptor.
        :rtype: AccountDescriptor
        """
        return self._insurance_account

    @insurance_account.setter
    def insurance_account(self, insurance_account):
        """Sets the insurance_account of this AccountWithDescriptor.


        :param insurance_account: The insurance_account of this AccountWithDescriptor.
        :type insurance_account: AccountDescriptor
        """
        if insurance_account is None:
            raise ValueError("Invalid value for `insurance_account`, must not be `None`")  # noqa: E501

        self._insurance_account = insurance_account

    @property
    def annuity_account(self):
        """Gets the annuity_account of this AccountWithDescriptor.


        :return: The annuity_account of this AccountWithDescriptor.
        :rtype: AccountDescriptor
        """
        return self._annuity_account

    @annuity_account.setter
    def annuity_account(self, annuity_account):
        """Sets the annuity_account of this AccountWithDescriptor.


        :param annuity_account: The annuity_account of this AccountWithDescriptor.
        :type annuity_account: AccountDescriptor
        """
        if annuity_account is None:
            raise ValueError("Invalid value for `annuity_account`, must not be `None`")  # noqa: E501

        self._annuity_account = annuity_account
