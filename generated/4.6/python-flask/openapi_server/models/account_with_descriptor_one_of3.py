# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.account_descriptor import AccountDescriptor
from openapi_server import util

from openapi_server.models.account_descriptor import AccountDescriptor  # noqa: E501

class AccountWithDescriptorOneOf3(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, investment_account=None):  # noqa: E501
        """AccountWithDescriptorOneOf3 - a model defined in OpenAPI

        :param investment_account: The investment_account of this AccountWithDescriptorOneOf3.  # noqa: E501
        :type investment_account: AccountDescriptor
        """
        self.openapi_types = {
            'investment_account': AccountDescriptor
        }

        self.attribute_map = {
            'investment_account': 'investmentAccount'
        }

        self._investment_account = investment_account

    @classmethod
    def from_dict(cls, dikt) -> 'AccountWithDescriptorOneOf3':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The AccountWithDescriptor_oneOf_3 of this AccountWithDescriptorOneOf3.  # noqa: E501
        :rtype: AccountWithDescriptorOneOf3
        """
        return util.deserialize_model(dikt, cls)

    @property
    def investment_account(self):
        """Gets the investment_account of this AccountWithDescriptorOneOf3.


        :return: The investment_account of this AccountWithDescriptorOneOf3.
        :rtype: AccountDescriptor
        """
        return self._investment_account

    @investment_account.setter
    def investment_account(self, investment_account):
        """Sets the investment_account of this AccountWithDescriptorOneOf3.


        :param investment_account: The investment_account of this AccountWithDescriptorOneOf3.
        :type investment_account: AccountDescriptor
        """
        if investment_account is None:
            raise ValueError("Invalid value for `investment_account`, must not be `None`")  # noqa: E501

        self._investment_account = investment_account
