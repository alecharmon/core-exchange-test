# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.account_with_details_one_of import AccountWithDetailsOneOf
from openapi_server.models.account_with_details_one_of1 import AccountWithDetailsOneOf1
from openapi_server.models.account_with_details_one_of2 import AccountWithDetailsOneOf2
from openapi_server.models.deposit_account import DepositAccount
from openapi_server.models.loan_account import LoanAccount
from openapi_server.models.loc_account import LocAccount
from openapi_server import util

from openapi_server.models.account_with_details_one_of import AccountWithDetailsOneOf  # noqa: E501
from openapi_server.models.account_with_details_one_of1 import AccountWithDetailsOneOf1  # noqa: E501
from openapi_server.models.account_with_details_one_of2 import AccountWithDetailsOneOf2  # noqa: E501
from openapi_server.models.deposit_account import DepositAccount  # noqa: E501
from openapi_server.models.loan_account import LoanAccount  # noqa: E501
from openapi_server.models.loc_account import LocAccount  # noqa: E501

class AccountWithDetails(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, deposit_account=None, loan_account=None, loc_account=None):  # noqa: E501
        """AccountWithDetails - a model defined in OpenAPI

        :param deposit_account: The deposit_account of this AccountWithDetails.  # noqa: E501
        :type deposit_account: DepositAccount
        :param loan_account: The loan_account of this AccountWithDetails.  # noqa: E501
        :type loan_account: LoanAccount
        :param loc_account: The loc_account of this AccountWithDetails.  # noqa: E501
        :type loc_account: LocAccount
        """
        self.openapi_types = {
            'deposit_account': DepositAccount,
            'loan_account': LoanAccount,
            'loc_account': LocAccount
        }

        self.attribute_map = {
            'deposit_account': 'depositAccount',
            'loan_account': 'loanAccount',
            'loc_account': 'locAccount'
        }

        self._deposit_account = deposit_account
        self._loan_account = loan_account
        self._loc_account = loc_account

    @classmethod
    def from_dict(cls, dikt) -> 'AccountWithDetails':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The AccountWithDetails of this AccountWithDetails.  # noqa: E501
        :rtype: AccountWithDetails
        """
        return util.deserialize_model(dikt, cls)

    @property
    def deposit_account(self):
        """Gets the deposit_account of this AccountWithDetails.


        :return: The deposit_account of this AccountWithDetails.
        :rtype: DepositAccount
        """
        return self._deposit_account

    @deposit_account.setter
    def deposit_account(self, deposit_account):
        """Sets the deposit_account of this AccountWithDetails.


        :param deposit_account: The deposit_account of this AccountWithDetails.
        :type deposit_account: DepositAccount
        """
        if deposit_account is None:
            raise ValueError("Invalid value for `deposit_account`, must not be `None`")  # noqa: E501

        self._deposit_account = deposit_account

    @property
    def loan_account(self):
        """Gets the loan_account of this AccountWithDetails.


        :return: The loan_account of this AccountWithDetails.
        :rtype: LoanAccount
        """
        return self._loan_account

    @loan_account.setter
    def loan_account(self, loan_account):
        """Sets the loan_account of this AccountWithDetails.


        :param loan_account: The loan_account of this AccountWithDetails.
        :type loan_account: LoanAccount
        """
        if loan_account is None:
            raise ValueError("Invalid value for `loan_account`, must not be `None`")  # noqa: E501

        self._loan_account = loan_account

    @property
    def loc_account(self):
        """Gets the loc_account of this AccountWithDetails.


        :return: The loc_account of this AccountWithDetails.
        :rtype: LocAccount
        """
        return self._loc_account

    @loc_account.setter
    def loc_account(self, loc_account):
        """Sets the loc_account of this AccountWithDetails.


        :param loc_account: The loc_account of this AccountWithDetails.
        :type loc_account: LocAccount
        """
        if loc_account is None:
            raise ValueError("Invalid value for `loc_account`, must not be `None`")  # noqa: E501

        self._loc_account = loc_account
