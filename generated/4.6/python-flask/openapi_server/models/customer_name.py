# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server import util


class CustomerName(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, first=None, middle=None, last=None, suffix=None, prefix=None):  # noqa: E501
        """CustomerName - a model defined in OpenAPI

        :param first: The first of this CustomerName.  # noqa: E501
        :type first: str
        :param middle: The middle of this CustomerName.  # noqa: E501
        :type middle: str
        :param last: The last of this CustomerName.  # noqa: E501
        :type last: str
        :param suffix: The suffix of this CustomerName.  # noqa: E501
        :type suffix: str
        :param prefix: The prefix of this CustomerName.  # noqa: E501
        :type prefix: str
        """
        self.openapi_types = {
            'first': str,
            'middle': str,
            'last': str,
            'suffix': str,
            'prefix': str
        }

        self.attribute_map = {
            'first': 'first',
            'middle': 'middle',
            'last': 'last',
            'suffix': 'suffix',
            'prefix': 'prefix'
        }

        self._first = first
        self._middle = middle
        self._last = last
        self._suffix = suffix
        self._prefix = prefix

    @classmethod
    def from_dict(cls, dikt) -> 'CustomerName':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The CustomerName of this CustomerName.  # noqa: E501
        :rtype: CustomerName
        """
        return util.deserialize_model(dikt, cls)

    @property
    def first(self):
        """Gets the first of this CustomerName.

        First name  # noqa: E501

        :return: The first of this CustomerName.
        :rtype: str
        """
        return self._first

    @first.setter
    def first(self, first):
        """Sets the first of this CustomerName.

        First name  # noqa: E501

        :param first: The first of this CustomerName.
        :type first: str
        """
        if first is None:
            raise ValueError("Invalid value for `first`, must not be `None`")  # noqa: E501

        self._first = first

    @property
    def middle(self):
        """Gets the middle of this CustomerName.

        Middle initial  # noqa: E501

        :return: The middle of this CustomerName.
        :rtype: str
        """
        return self._middle

    @middle.setter
    def middle(self, middle):
        """Sets the middle of this CustomerName.

        Middle initial  # noqa: E501

        :param middle: The middle of this CustomerName.
        :type middle: str
        """

        self._middle = middle

    @property
    def last(self):
        """Gets the last of this CustomerName.

        Last name  # noqa: E501

        :return: The last of this CustomerName.
        :rtype: str
        """
        return self._last

    @last.setter
    def last(self, last):
        """Sets the last of this CustomerName.

        Last name  # noqa: E501

        :param last: The last of this CustomerName.
        :type last: str
        """
        if last is None:
            raise ValueError("Invalid value for `last`, must not be `None`")  # noqa: E501

        self._last = last

    @property
    def suffix(self):
        """Gets the suffix of this CustomerName.

        Generational or academic suffix  # noqa: E501

        :return: The suffix of this CustomerName.
        :rtype: str
        """
        return self._suffix

    @suffix.setter
    def suffix(self, suffix):
        """Sets the suffix of this CustomerName.

        Generational or academic suffix  # noqa: E501

        :param suffix: The suffix of this CustomerName.
        :type suffix: str
        """

        self._suffix = suffix

    @property
    def prefix(self):
        """Gets the prefix of this CustomerName.

        Name prefix, e.g. Mr.  # noqa: E501

        :return: The prefix of this CustomerName.
        :rtype: str
        """
        return self._prefix

    @prefix.setter
    def prefix(self, prefix):
        """Sets the prefix of this CustomerName.

        Name prefix, e.g. Mr.  # noqa: E501

        :param prefix: The prefix of this CustomerName.
        :type prefix: str
        """

        self._prefix = prefix
