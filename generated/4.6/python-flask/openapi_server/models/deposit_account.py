# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.account_type import AccountType
from openapi_server.models.currency import Currency
from openapi_server import util

from openapi_server.models.account_type import AccountType  # noqa: E501
from openapi_server.models.currency import Currency  # noqa: E501

class DepositAccount(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_id=None, account_type=None, account_number_display=None, product_name=None, nickname=None, status=None, currency=None, current_balance=None, available_balance=None):  # noqa: E501
        """DepositAccount - a model defined in OpenAPI

        :param account_id: The account_id of this DepositAccount.  # noqa: E501
        :type account_id: str
        :param account_type: The account_type of this DepositAccount.  # noqa: E501
        :type account_type: AccountType
        :param account_number_display: The account_number_display of this DepositAccount.  # noqa: E501
        :type account_number_display: str
        :param product_name: The product_name of this DepositAccount.  # noqa: E501
        :type product_name: str
        :param nickname: The nickname of this DepositAccount.  # noqa: E501
        :type nickname: str
        :param status: The status of this DepositAccount.  # noqa: E501
        :type status: str
        :param currency: The currency of this DepositAccount.  # noqa: E501
        :type currency: Currency
        :param current_balance: The current_balance of this DepositAccount.  # noqa: E501
        :type current_balance: float
        :param available_balance: The available_balance of this DepositAccount.  # noqa: E501
        :type available_balance: float
        """
        self.openapi_types = {
            'account_id': str,
            'account_type': AccountType,
            'account_number_display': str,
            'product_name': str,
            'nickname': str,
            'status': str,
            'currency': Currency,
            'current_balance': float,
            'available_balance': float
        }

        self.attribute_map = {
            'account_id': 'accountId',
            'account_type': 'accountType',
            'account_number_display': 'accountNumberDisplay',
            'product_name': 'productName',
            'nickname': 'nickname',
            'status': 'status',
            'currency': 'currency',
            'current_balance': 'currentBalance',
            'available_balance': 'availableBalance'
        }

        self._account_id = account_id
        self._account_type = account_type
        self._account_number_display = account_number_display
        self._product_name = product_name
        self._nickname = nickname
        self._status = status
        self._currency = currency
        self._current_balance = current_balance
        self._available_balance = available_balance

    @classmethod
    def from_dict(cls, dikt) -> 'DepositAccount':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The DepositAccount of this DepositAccount.  # noqa: E501
        :rtype: DepositAccount
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_id(self):
        """Gets the account_id of this DepositAccount.

        Value for a unique identifier  # noqa: E501

        :return: The account_id of this DepositAccount.
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this DepositAccount.

        Value for a unique identifier  # noqa: E501

        :param account_id: The account_id of this DepositAccount.
        :type account_id: str
        """
        if account_id is None:
            raise ValueError("Invalid value for `account_id`, must not be `None`")  # noqa: E501
        if account_id is not None and len(account_id) > 256:
            raise ValueError("Invalid value for `account_id`, length must be less than or equal to `256`")  # noqa: E501

        self._account_id = account_id

    @property
    def account_type(self):
        """Gets the account_type of this DepositAccount.


        :return: The account_type of this DepositAccount.
        :rtype: AccountType
        """
        return self._account_type

    @account_type.setter
    def account_type(self, account_type):
        """Sets the account_type of this DepositAccount.


        :param account_type: The account_type of this DepositAccount.
        :type account_type: AccountType
        """
        if account_type is None:
            raise ValueError("Invalid value for `account_type`, must not be `None`")  # noqa: E501

        self._account_type = account_type

    @property
    def account_number_display(self):
        """Gets the account_number_display of this DepositAccount.

        Account display number for the end user's handle at the owning financial institution. Plaid expects that the last 4 digits of this masked number correspond to the last 4 digits of the account number.   # noqa: E501

        :return: The account_number_display of this DepositAccount.
        :rtype: str
        """
        return self._account_number_display

    @account_number_display.setter
    def account_number_display(self, account_number_display):
        """Sets the account_number_display of this DepositAccount.

        Account display number for the end user's handle at the owning financial institution. Plaid expects that the last 4 digits of this masked number correspond to the last 4 digits of the account number.   # noqa: E501

        :param account_number_display: The account_number_display of this DepositAccount.
        :type account_number_display: str
        """

        self._account_number_display = account_number_display

    @property
    def product_name(self):
        """Gets the product_name of this DepositAccount.

        Marketed product name for this account. Used in UIs to assist in account selection  # noqa: E501

        :return: The product_name of this DepositAccount.
        :rtype: str
        """
        return self._product_name

    @product_name.setter
    def product_name(self, product_name):
        """Sets the product_name of this DepositAccount.

        Marketed product name for this account. Used in UIs to assist in account selection  # noqa: E501

        :param product_name: The product_name of this DepositAccount.
        :type product_name: str
        """
        if product_name is None:
            raise ValueError("Invalid value for `product_name`, must not be `None`")  # noqa: E501

        self._product_name = product_name

    @property
    def nickname(self):
        """Gets the nickname of this DepositAccount.

        Name given by the user. Used in UIs to assist in account selection. Plaid recommends returning this only if the account permits user renaming.   # noqa: E501

        :return: The nickname of this DepositAccount.
        :rtype: str
        """
        return self._nickname

    @nickname.setter
    def nickname(self, nickname):
        """Sets the nickname of this DepositAccount.

        Name given by the user. Used in UIs to assist in account selection. Plaid recommends returning this only if the account permits user renaming.   # noqa: E501

        :param nickname: The nickname of this DepositAccount.
        :type nickname: str
        """

        self._nickname = nickname

    @property
    def status(self):
        """Gets the status of this DepositAccount.

        Account status  # noqa: E501

        :return: The status of this DepositAccount.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this DepositAccount.

        Account status  # noqa: E501

        :param status: The status of this DepositAccount.
        :type status: str
        """
        allowed_values = ["OPEN", "CLOSED", "PENDINGOPEN", "PENDINGCLOSE", "DELINQUENT", "PAID", "NEGATIVECURRENTBALANCE"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def currency(self):
        """Gets the currency of this DepositAccount.


        :return: The currency of this DepositAccount.
        :rtype: Currency
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this DepositAccount.


        :param currency: The currency of this DepositAccount.
        :type currency: Currency
        """
        if currency is None:
            raise ValueError("Invalid value for `currency`, must not be `None`")  # noqa: E501

        self._currency = currency

    @property
    def current_balance(self):
        """Gets the current_balance of this DepositAccount.

        The total amount of money in the account (sum of all posted/cleared transactions, not including pending transactions). For Plaid's full definition, see the [Transactions](https://plaid.com/docs/api/products/transactions/#transactions-get-response-accounts-balances-current).   # noqa: E501

        :return: The current_balance of this DepositAccount.
        :rtype: float
        """
        return self._current_balance

    @current_balance.setter
    def current_balance(self, current_balance):
        """Sets the current_balance of this DepositAccount.

        The total amount of money in the account (sum of all posted/cleared transactions, not including pending transactions). For Plaid's full definition, see the [Transactions](https://plaid.com/docs/api/products/transactions/#transactions-get-response-accounts-balances-current).   # noqa: E501

        :param current_balance: The current_balance of this DepositAccount.
        :type current_balance: float
        """
        if current_balance is None:
            raise ValueError("Invalid value for `current_balance`, must not be `None`")  # noqa: E501

        self._current_balance = current_balance

    @property
    def available_balance(self):
        """Gets the available_balance of this DepositAccount.

        The money in the account available to spend (sum of all transactions, plus or minus pending transactions). For Plaid's full definition, see [Transactions](https://plaid.com/docs/api/products/transactions/#transactions-get-response-accounts-balances-available).   # noqa: E501

        :return: The available_balance of this DepositAccount.
        :rtype: float
        """
        return self._available_balance

    @available_balance.setter
    def available_balance(self, available_balance):
        """Sets the available_balance of this DepositAccount.

        The money in the account available to spend (sum of all transactions, plus or minus pending transactions). For Plaid's full definition, see [Transactions](https://plaid.com/docs/api/products/transactions/#transactions-get-response-accounts-balances-available).   # noqa: E501

        :param available_balance: The available_balance of this DepositAccount.
        :type available_balance: float
        """
        if available_balance is None:
            raise ValueError("Invalid value for `available_balance`, must not be `None`")  # noqa: E501

        self._available_balance = available_balance
