# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.deposit_transaction_type import DepositTransactionType
from openapi_server import util

from openapi_server.models.deposit_transaction_type import DepositTransactionType  # noqa: E501

class DepositTransactionAllOf(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, transaction_type=None, payee=None, check_number=None):  # noqa: E501
        """DepositTransactionAllOf - a model defined in OpenAPI

        :param transaction_type: The transaction_type of this DepositTransactionAllOf.  # noqa: E501
        :type transaction_type: DepositTransactionType
        :param payee: The payee of this DepositTransactionAllOf.  # noqa: E501
        :type payee: str
        :param check_number: The check_number of this DepositTransactionAllOf.  # noqa: E501
        :type check_number: int
        """
        self.openapi_types = {
            'transaction_type': DepositTransactionType,
            'payee': str,
            'check_number': int
        }

        self.attribute_map = {
            'transaction_type': 'transactionType',
            'payee': 'payee',
            'check_number': 'checkNumber'
        }

        self._transaction_type = transaction_type
        self._payee = payee
        self._check_number = check_number

    @classmethod
    def from_dict(cls, dikt) -> 'DepositTransactionAllOf':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The DepositTransaction_allOf of this DepositTransactionAllOf.  # noqa: E501
        :rtype: DepositTransactionAllOf
        """
        return util.deserialize_model(dikt, cls)

    @property
    def transaction_type(self):
        """Gets the transaction_type of this DepositTransactionAllOf.


        :return: The transaction_type of this DepositTransactionAllOf.
        :rtype: DepositTransactionType
        """
        return self._transaction_type

    @transaction_type.setter
    def transaction_type(self, transaction_type):
        """Sets the transaction_type of this DepositTransactionAllOf.


        :param transaction_type: The transaction_type of this DepositTransactionAllOf.
        :type transaction_type: DepositTransactionType
        """

        self._transaction_type = transaction_type

    @property
    def payee(self):
        """Gets the payee of this DepositTransactionAllOf.

        String of maximum length 255  # noqa: E501

        :return: The payee of this DepositTransactionAllOf.
        :rtype: str
        """
        return self._payee

    @payee.setter
    def payee(self, payee):
        """Sets the payee of this DepositTransactionAllOf.

        String of maximum length 255  # noqa: E501

        :param payee: The payee of this DepositTransactionAllOf.
        :type payee: str
        """
        if payee is not None and len(payee) > 255:
            raise ValueError("Invalid value for `payee`, length must be less than or equal to `255`")  # noqa: E501

        self._payee = payee

    @property
    def check_number(self):
        """Gets the check_number of this DepositTransactionAllOf.

        Check number. Plaid expects this solely if the transaction involves a check.   # noqa: E501

        :return: The check_number of this DepositTransactionAllOf.
        :rtype: int
        """
        return self._check_number

    @check_number.setter
    def check_number(self, check_number):
        """Sets the check_number of this DepositTransactionAllOf.

        Check number. Plaid expects this solely if the transaction involves a check.   # noqa: E501

        :param check_number: The check_number of this DepositTransactionAllOf.
        :type check_number: int
        """

        self._check_number = check_number
