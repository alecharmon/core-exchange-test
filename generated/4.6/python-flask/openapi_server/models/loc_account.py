# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.account_type import AccountType
from openapi_server.models.currency import Currency
from openapi_server import util

from openapi_server.models.account_type import AccountType  # noqa: E501
from openapi_server.models.currency import Currency  # noqa: E501

class LocAccount(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_id=None, account_type=None, account_number_display=None, product_name=None, nickname=None, status=None, currency=None, credit_line=None, available_credit=None, next_payment_amount=None, next_payment_date=None, principal_balance=None, current_balance=None, minimum_payment_amount=None, last_payment_amount=None, last_payment_date=None, past_due_amount=None, last_stmt_balance=None, last_stmt_date=None, purchases_apr=None, advances_apr=None):  # noqa: E501
        """LocAccount - a model defined in OpenAPI

        :param account_id: The account_id of this LocAccount.  # noqa: E501
        :type account_id: str
        :param account_type: The account_type of this LocAccount.  # noqa: E501
        :type account_type: AccountType
        :param account_number_display: The account_number_display of this LocAccount.  # noqa: E501
        :type account_number_display: str
        :param product_name: The product_name of this LocAccount.  # noqa: E501
        :type product_name: str
        :param nickname: The nickname of this LocAccount.  # noqa: E501
        :type nickname: str
        :param status: The status of this LocAccount.  # noqa: E501
        :type status: str
        :param currency: The currency of this LocAccount.  # noqa: E501
        :type currency: Currency
        :param credit_line: The credit_line of this LocAccount.  # noqa: E501
        :type credit_line: float
        :param available_credit: The available_credit of this LocAccount.  # noqa: E501
        :type available_credit: float
        :param next_payment_amount: The next_payment_amount of this LocAccount.  # noqa: E501
        :type next_payment_amount: float
        :param next_payment_date: The next_payment_date of this LocAccount.  # noqa: E501
        :type next_payment_date: datetime
        :param principal_balance: The principal_balance of this LocAccount.  # noqa: E501
        :type principal_balance: float
        :param current_balance: The current_balance of this LocAccount.  # noqa: E501
        :type current_balance: float
        :param minimum_payment_amount: The minimum_payment_amount of this LocAccount.  # noqa: E501
        :type minimum_payment_amount: float
        :param last_payment_amount: The last_payment_amount of this LocAccount.  # noqa: E501
        :type last_payment_amount: float
        :param last_payment_date: The last_payment_date of this LocAccount.  # noqa: E501
        :type last_payment_date: datetime
        :param past_due_amount: The past_due_amount of this LocAccount.  # noqa: E501
        :type past_due_amount: float
        :param last_stmt_balance: The last_stmt_balance of this LocAccount.  # noqa: E501
        :type last_stmt_balance: float
        :param last_stmt_date: The last_stmt_date of this LocAccount.  # noqa: E501
        :type last_stmt_date: datetime
        :param purchases_apr: The purchases_apr of this LocAccount.  # noqa: E501
        :type purchases_apr: float
        :param advances_apr: The advances_apr of this LocAccount.  # noqa: E501
        :type advances_apr: float
        """
        self.openapi_types = {
            'account_id': str,
            'account_type': AccountType,
            'account_number_display': str,
            'product_name': str,
            'nickname': str,
            'status': str,
            'currency': Currency,
            'credit_line': float,
            'available_credit': float,
            'next_payment_amount': float,
            'next_payment_date': datetime,
            'principal_balance': float,
            'current_balance': float,
            'minimum_payment_amount': float,
            'last_payment_amount': float,
            'last_payment_date': datetime,
            'past_due_amount': float,
            'last_stmt_balance': float,
            'last_stmt_date': datetime,
            'purchases_apr': float,
            'advances_apr': float
        }

        self.attribute_map = {
            'account_id': 'accountId',
            'account_type': 'accountType',
            'account_number_display': 'accountNumberDisplay',
            'product_name': 'productName',
            'nickname': 'nickname',
            'status': 'status',
            'currency': 'currency',
            'credit_line': 'creditLine',
            'available_credit': 'availableCredit',
            'next_payment_amount': 'nextPaymentAmount',
            'next_payment_date': 'nextPaymentDate',
            'principal_balance': 'principalBalance',
            'current_balance': 'currentBalance',
            'minimum_payment_amount': 'minimumPaymentAmount',
            'last_payment_amount': 'lastPaymentAmount',
            'last_payment_date': 'lastPaymentDate',
            'past_due_amount': 'pastDueAmount',
            'last_stmt_balance': 'lastStmtBalance',
            'last_stmt_date': 'lastStmtDate',
            'purchases_apr': 'purchasesApr',
            'advances_apr': 'advancesApr'
        }

        self._account_id = account_id
        self._account_type = account_type
        self._account_number_display = account_number_display
        self._product_name = product_name
        self._nickname = nickname
        self._status = status
        self._currency = currency
        self._credit_line = credit_line
        self._available_credit = available_credit
        self._next_payment_amount = next_payment_amount
        self._next_payment_date = next_payment_date
        self._principal_balance = principal_balance
        self._current_balance = current_balance
        self._minimum_payment_amount = minimum_payment_amount
        self._last_payment_amount = last_payment_amount
        self._last_payment_date = last_payment_date
        self._past_due_amount = past_due_amount
        self._last_stmt_balance = last_stmt_balance
        self._last_stmt_date = last_stmt_date
        self._purchases_apr = purchases_apr
        self._advances_apr = advances_apr

    @classmethod
    def from_dict(cls, dikt) -> 'LocAccount':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The LocAccount of this LocAccount.  # noqa: E501
        :rtype: LocAccount
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_id(self):
        """Gets the account_id of this LocAccount.

        Value for a unique identifier  # noqa: E501

        :return: The account_id of this LocAccount.
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this LocAccount.

        Value for a unique identifier  # noqa: E501

        :param account_id: The account_id of this LocAccount.
        :type account_id: str
        """
        if account_id is None:
            raise ValueError("Invalid value for `account_id`, must not be `None`")  # noqa: E501
        if account_id is not None and len(account_id) > 256:
            raise ValueError("Invalid value for `account_id`, length must be less than or equal to `256`")  # noqa: E501

        self._account_id = account_id

    @property
    def account_type(self):
        """Gets the account_type of this LocAccount.


        :return: The account_type of this LocAccount.
        :rtype: AccountType
        """
        return self._account_type

    @account_type.setter
    def account_type(self, account_type):
        """Sets the account_type of this LocAccount.


        :param account_type: The account_type of this LocAccount.
        :type account_type: AccountType
        """
        if account_type is None:
            raise ValueError("Invalid value for `account_type`, must not be `None`")  # noqa: E501

        self._account_type = account_type

    @property
    def account_number_display(self):
        """Gets the account_number_display of this LocAccount.

        Account display number for the end user's handle at the owning financial institution. Plaid expects that the last 4 digits of this masked number correspond to the last 4 digits of the account number.   # noqa: E501

        :return: The account_number_display of this LocAccount.
        :rtype: str
        """
        return self._account_number_display

    @account_number_display.setter
    def account_number_display(self, account_number_display):
        """Sets the account_number_display of this LocAccount.

        Account display number for the end user's handle at the owning financial institution. Plaid expects that the last 4 digits of this masked number correspond to the last 4 digits of the account number.   # noqa: E501

        :param account_number_display: The account_number_display of this LocAccount.
        :type account_number_display: str
        """

        self._account_number_display = account_number_display

    @property
    def product_name(self):
        """Gets the product_name of this LocAccount.

        Marketed product name for this account. Used in UIs to assist in account selection  # noqa: E501

        :return: The product_name of this LocAccount.
        :rtype: str
        """
        return self._product_name

    @product_name.setter
    def product_name(self, product_name):
        """Sets the product_name of this LocAccount.

        Marketed product name for this account. Used in UIs to assist in account selection  # noqa: E501

        :param product_name: The product_name of this LocAccount.
        :type product_name: str
        """
        if product_name is None:
            raise ValueError("Invalid value for `product_name`, must not be `None`")  # noqa: E501

        self._product_name = product_name

    @property
    def nickname(self):
        """Gets the nickname of this LocAccount.

        Name given by the user. Used in UIs to assist in account selection. Plaid recommends returning this only if the account permits user renaming.   # noqa: E501

        :return: The nickname of this LocAccount.
        :rtype: str
        """
        return self._nickname

    @nickname.setter
    def nickname(self, nickname):
        """Sets the nickname of this LocAccount.

        Name given by the user. Used in UIs to assist in account selection. Plaid recommends returning this only if the account permits user renaming.   # noqa: E501

        :param nickname: The nickname of this LocAccount.
        :type nickname: str
        """

        self._nickname = nickname

    @property
    def status(self):
        """Gets the status of this LocAccount.

        Account status  # noqa: E501

        :return: The status of this LocAccount.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this LocAccount.

        Account status  # noqa: E501

        :param status: The status of this LocAccount.
        :type status: str
        """
        allowed_values = ["OPEN", "CLOSED", "PENDINGOPEN", "PENDINGCLOSE", "DELINQUENT", "PAID", "NEGATIVECURRENTBALANCE"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def currency(self):
        """Gets the currency of this LocAccount.


        :return: The currency of this LocAccount.
        :rtype: Currency
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this LocAccount.


        :param currency: The currency of this LocAccount.
        :type currency: Currency
        """
        if currency is None:
            raise ValueError("Invalid value for `currency`, must not be `None`")  # noqa: E501

        self._currency = currency

    @property
    def credit_line(self):
        """Gets the credit_line of this LocAccount.

        Credit limit  # noqa: E501

        :return: The credit_line of this LocAccount.
        :rtype: float
        """
        return self._credit_line

    @credit_line.setter
    def credit_line(self, credit_line):
        """Sets the credit_line of this LocAccount.

        Credit limit  # noqa: E501

        :param credit_line: The credit_line of this LocAccount.
        :type credit_line: float
        """

        self._credit_line = credit_line

    @property
    def available_credit(self):
        """Gets the available_credit of this LocAccount.

        Available credit  # noqa: E501

        :return: The available_credit of this LocAccount.
        :rtype: float
        """
        return self._available_credit

    @available_credit.setter
    def available_credit(self, available_credit):
        """Sets the available_credit of this LocAccount.

        Available credit  # noqa: E501

        :param available_credit: The available_credit of this LocAccount.
        :type available_credit: float
        """
        if available_credit is None:
            raise ValueError("Invalid value for `available_credit`, must not be `None`")  # noqa: E501

        self._available_credit = available_credit

    @property
    def next_payment_amount(self):
        """Gets the next_payment_amount of this LocAccount.

        Amount of next payment  # noqa: E501

        :return: The next_payment_amount of this LocAccount.
        :rtype: float
        """
        return self._next_payment_amount

    @next_payment_amount.setter
    def next_payment_amount(self, next_payment_amount):
        """Sets the next_payment_amount of this LocAccount.

        Amount of next payment  # noqa: E501

        :param next_payment_amount: The next_payment_amount of this LocAccount.
        :type next_payment_amount: float
        """

        self._next_payment_amount = next_payment_amount

    @property
    def next_payment_date(self):
        """Gets the next_payment_date of this LocAccount.

        ISO 8601 date-time in format 'YYYY-MM-DDThh:mm:ss.nnn[Z|[+|-]hh:mm]' according to [IETF RFC3339](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#anchor14)  # noqa: E501

        :return: The next_payment_date of this LocAccount.
        :rtype: datetime
        """
        return self._next_payment_date

    @next_payment_date.setter
    def next_payment_date(self, next_payment_date):
        """Sets the next_payment_date of this LocAccount.

        ISO 8601 date-time in format 'YYYY-MM-DDThh:mm:ss.nnn[Z|[+|-]hh:mm]' according to [IETF RFC3339](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#anchor14)  # noqa: E501

        :param next_payment_date: The next_payment_date of this LocAccount.
        :type next_payment_date: datetime
        """

        self._next_payment_date = next_payment_date

    @property
    def principal_balance(self):
        """Gets the principal_balance of this LocAccount.

        Principal balance  # noqa: E501

        :return: The principal_balance of this LocAccount.
        :rtype: float
        """
        return self._principal_balance

    @principal_balance.setter
    def principal_balance(self, principal_balance):
        """Sets the principal_balance of this LocAccount.

        Principal balance  # noqa: E501

        :param principal_balance: The principal_balance of this LocAccount.
        :type principal_balance: float
        """

        self._principal_balance = principal_balance

    @property
    def current_balance(self):
        """Gets the current_balance of this LocAccount.

        Current balance of the line of credit  # noqa: E501

        :return: The current_balance of this LocAccount.
        :rtype: float
        """
        return self._current_balance

    @current_balance.setter
    def current_balance(self, current_balance):
        """Sets the current_balance of this LocAccount.

        Current balance of the line of credit  # noqa: E501

        :param current_balance: The current_balance of this LocAccount.
        :type current_balance: float
        """
        if current_balance is None:
            raise ValueError("Invalid value for `current_balance`, must not be `None`")  # noqa: E501

        self._current_balance = current_balance

    @property
    def minimum_payment_amount(self):
        """Gets the minimum_payment_amount of this LocAccount.

        Minimum payment amount  # noqa: E501

        :return: The minimum_payment_amount of this LocAccount.
        :rtype: float
        """
        return self._minimum_payment_amount

    @minimum_payment_amount.setter
    def minimum_payment_amount(self, minimum_payment_amount):
        """Sets the minimum_payment_amount of this LocAccount.

        Minimum payment amount  # noqa: E501

        :param minimum_payment_amount: The minimum_payment_amount of this LocAccount.
        :type minimum_payment_amount: float
        """

        self._minimum_payment_amount = minimum_payment_amount

    @property
    def last_payment_amount(self):
        """Gets the last_payment_amount of this LocAccount.

        Last payment amount  # noqa: E501

        :return: The last_payment_amount of this LocAccount.
        :rtype: float
        """
        return self._last_payment_amount

    @last_payment_amount.setter
    def last_payment_amount(self, last_payment_amount):
        """Sets the last_payment_amount of this LocAccount.

        Last payment amount  # noqa: E501

        :param last_payment_amount: The last_payment_amount of this LocAccount.
        :type last_payment_amount: float
        """

        self._last_payment_amount = last_payment_amount

    @property
    def last_payment_date(self):
        """Gets the last_payment_date of this LocAccount.

        ISO 8601 date-time in format 'YYYY-MM-DDThh:mm:ss.nnn[Z|[+|-]hh:mm]' according to [IETF RFC3339](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#anchor14)  # noqa: E501

        :return: The last_payment_date of this LocAccount.
        :rtype: datetime
        """
        return self._last_payment_date

    @last_payment_date.setter
    def last_payment_date(self, last_payment_date):
        """Sets the last_payment_date of this LocAccount.

        ISO 8601 date-time in format 'YYYY-MM-DDThh:mm:ss.nnn[Z|[+|-]hh:mm]' according to [IETF RFC3339](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#anchor14)  # noqa: E501

        :param last_payment_date: The last_payment_date of this LocAccount.
        :type last_payment_date: datetime
        """

        self._last_payment_date = last_payment_date

    @property
    def past_due_amount(self):
        """Gets the past_due_amount of this LocAccount.

        Past Due Amount  # noqa: E501

        :return: The past_due_amount of this LocAccount.
        :rtype: float
        """
        return self._past_due_amount

    @past_due_amount.setter
    def past_due_amount(self, past_due_amount):
        """Sets the past_due_amount of this LocAccount.

        Past Due Amount  # noqa: E501

        :param past_due_amount: The past_due_amount of this LocAccount.
        :type past_due_amount: float
        """

        self._past_due_amount = past_due_amount

    @property
    def last_stmt_balance(self):
        """Gets the last_stmt_balance of this LocAccount.

        Last Statement Balance  # noqa: E501

        :return: The last_stmt_balance of this LocAccount.
        :rtype: float
        """
        return self._last_stmt_balance

    @last_stmt_balance.setter
    def last_stmt_balance(self, last_stmt_balance):
        """Sets the last_stmt_balance of this LocAccount.

        Last Statement Balance  # noqa: E501

        :param last_stmt_balance: The last_stmt_balance of this LocAccount.
        :type last_stmt_balance: float
        """

        self._last_stmt_balance = last_stmt_balance

    @property
    def last_stmt_date(self):
        """Gets the last_stmt_date of this LocAccount.

        ISO 8601 date-time in format 'YYYY-MM-DDThh:mm:ss.nnn[Z|[+|-]hh:mm]' according to [IETF RFC3339](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#anchor14)  # noqa: E501

        :return: The last_stmt_date of this LocAccount.
        :rtype: datetime
        """
        return self._last_stmt_date

    @last_stmt_date.setter
    def last_stmt_date(self, last_stmt_date):
        """Sets the last_stmt_date of this LocAccount.

        ISO 8601 date-time in format 'YYYY-MM-DDThh:mm:ss.nnn[Z|[+|-]hh:mm]' according to [IETF RFC3339](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#anchor14)  # noqa: E501

        :param last_stmt_date: The last_stmt_date of this LocAccount.
        :type last_stmt_date: datetime
        """

        self._last_stmt_date = last_stmt_date

    @property
    def purchases_apr(self):
        """Gets the purchases_apr of this LocAccount.

        Purchases APR  # noqa: E501

        :return: The purchases_apr of this LocAccount.
        :rtype: float
        """
        return self._purchases_apr

    @purchases_apr.setter
    def purchases_apr(self, purchases_apr):
        """Sets the purchases_apr of this LocAccount.

        Purchases APR  # noqa: E501

        :param purchases_apr: The purchases_apr of this LocAccount.
        :type purchases_apr: float
        """

        self._purchases_apr = purchases_apr

    @property
    def advances_apr(self):
        """Gets the advances_apr of this LocAccount.

        Advances APR  # noqa: E501

        :return: The advances_apr of this LocAccount.
        :rtype: float
        """
        return self._advances_apr

    @advances_apr.setter
    def advances_apr(self, advances_apr):
        """Sets the advances_apr of this LocAccount.

        Advances APR  # noqa: E501

        :param advances_apr: The advances_apr of this LocAccount.
        :type advances_apr: float
        """

        self._advances_apr = advances_apr
