# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.telephone_number_type import TelephoneNumberType
import re
from openapi_server import util

from openapi_server.models.telephone_number_type import TelephoneNumberType  # noqa: E501
import re  # noqa: E501

class TelephoneNumber(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, type=None, country=None, number=None):  # noqa: E501
        """TelephoneNumber - a model defined in OpenAPI

        :param type: The type of this TelephoneNumber.  # noqa: E501
        :type type: TelephoneNumberType
        :param country: The country of this TelephoneNumber.  # noqa: E501
        :type country: str
        :param number: The number of this TelephoneNumber.  # noqa: E501
        :type number: str
        """
        self.openapi_types = {
            'type': TelephoneNumberType,
            'country': str,
            'number': str
        }

        self.attribute_map = {
            'type': 'type',
            'country': 'country',
            'number': 'number'
        }

        self._type = type
        self._country = country
        self._number = number

    @classmethod
    def from_dict(cls, dikt) -> 'TelephoneNumber':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The TelephoneNumber of this TelephoneNumber.  # noqa: E501
        :rtype: TelephoneNumber
        """
        return util.deserialize_model(dikt, cls)

    @property
    def type(self):
        """Gets the type of this TelephoneNumber.


        :return: The type of this TelephoneNumber.
        :rtype: TelephoneNumberType
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this TelephoneNumber.


        :param type: The type of this TelephoneNumber.
        :type type: TelephoneNumberType
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    @property
    def country(self):
        """Gets the country of this TelephoneNumber.

        Country calling codes defined by ITU-T recommendations E.123 and E.164  # noqa: E501

        :return: The country of this TelephoneNumber.
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this TelephoneNumber.

        Country calling codes defined by ITU-T recommendations E.123 and E.164  # noqa: E501

        :param country: The country of this TelephoneNumber.
        :type country: str
        """
        if country is not None and len(country) > 3:
            raise ValueError("Invalid value for `country`, length must be less than or equal to `3`")  # noqa: E501

        self._country = country

    @property
    def number(self):
        """Gets the number of this TelephoneNumber.

        Telephone subscriber number defined by ITU-T recommendation E.164  # noqa: E501

        :return: The number of this TelephoneNumber.
        :rtype: str
        """
        return self._number

    @number.setter
    def number(self, number):
        """Sets the number of this TelephoneNumber.

        Telephone subscriber number defined by ITU-T recommendation E.164  # noqa: E501

        :param number: The number of this TelephoneNumber.
        :type number: str
        """
        if number is None:
            raise ValueError("Invalid value for `number`, must not be `None`")  # noqa: E501
        if number is not None and len(number) > 15:
            raise ValueError("Invalid value for `number`, length must be less than or equal to `15`")  # noqa: E501
        if number is not None and not re.search(r'\d+', number):  # noqa: E501
            raise ValueError("Invalid value for `number`, must be a follow pattern or equal to `/\d+/`")  # noqa: E501

        self._number = number
