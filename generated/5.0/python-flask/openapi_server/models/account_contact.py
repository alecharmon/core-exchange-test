# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.account_holder import AccountHolder
from openapi_server.models.delivery_address import DeliveryAddress
from openapi_server.models.telephone_number import TelephoneNumber
from openapi_server import util

from openapi_server.models.account_holder import AccountHolder  # noqa: E501
from openapi_server.models.delivery_address import DeliveryAddress  # noqa: E501
from openapi_server.models.telephone_number import TelephoneNumber  # noqa: E501

class AccountContact(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, holders=None, emails=None, addresses=None, telephones=None):  # noqa: E501
        """AccountContact - a model defined in OpenAPI

        :param holders: The holders of this AccountContact.  # noqa: E501
        :type holders: List[AccountHolder]
        :param emails: The emails of this AccountContact.  # noqa: E501
        :type emails: List[str]
        :param addresses: The addresses of this AccountContact.  # noqa: E501
        :type addresses: List[DeliveryAddress]
        :param telephones: The telephones of this AccountContact.  # noqa: E501
        :type telephones: List[TelephoneNumber]
        """
        self.openapi_types = {
            'holders': List[AccountHolder],
            'emails': List[str],
            'addresses': List[DeliveryAddress],
            'telephones': List[TelephoneNumber]
        }

        self.attribute_map = {
            'holders': 'holders',
            'emails': 'emails',
            'addresses': 'addresses',
            'telephones': 'telephones'
        }

        self._holders = holders
        self._emails = emails
        self._addresses = addresses
        self._telephones = telephones

    @classmethod
    def from_dict(cls, dikt) -> 'AccountContact':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The AccountContact of this AccountContact.  # noqa: E501
        :rtype: AccountContact
        """
        return util.deserialize_model(dikt, cls)

    @property
    def holders(self):
        """Gets the holders of this AccountContact.

        Owners of the account. Plaid expects your organization to return an empty array if this information isn't available. Note that while the [FDX specification]((https://financialdataexchange.org) enables associating holders and their contact information in the full `AccountHolder` schema, Plaid doesn't consume these associations. Instead, Plaid consumes limited information for each `AccountHolder` and doesn't associate contact information such as emails, addresses, or telephone numbers to account holders. For more information about Plaid's data model for account contact information, see [Identity](https://plaid.com/docs/api/products/identity/).   # noqa: E501

        :return: The holders of this AccountContact.
        :rtype: List[AccountHolder]
        """
        return self._holders

    @holders.setter
    def holders(self, holders):
        """Sets the holders of this AccountContact.

        Owners of the account. Plaid expects your organization to return an empty array if this information isn't available. Note that while the [FDX specification]((https://financialdataexchange.org) enables associating holders and their contact information in the full `AccountHolder` schema, Plaid doesn't consume these associations. Instead, Plaid consumes limited information for each `AccountHolder` and doesn't associate contact information such as emails, addresses, or telephone numbers to account holders. For more information about Plaid's data model for account contact information, see [Identity](https://plaid.com/docs/api/products/identity/).   # noqa: E501

        :param holders: The holders of this AccountContact.
        :type holders: List[AccountHolder]
        """
        if holders is None:
            raise ValueError("Invalid value for `holders`, must not be `None`")  # noqa: E501
        if holders is not None and len(holders) < 1:
            raise ValueError("Invalid value for `holders`, number of items must be greater than or equal to `1`")  # noqa: E501

        self._holders = holders

    @property
    def emails(self):
        """Gets the emails of this AccountContact.

        Email addresses associated with the account. Plaid expects your organization to return an empty array if this information isn't available.   # noqa: E501

        :return: The emails of this AccountContact.
        :rtype: List[str]
        """
        return self._emails

    @emails.setter
    def emails(self, emails):
        """Sets the emails of this AccountContact.

        Email addresses associated with the account. Plaid expects your organization to return an empty array if this information isn't available.   # noqa: E501

        :param emails: The emails of this AccountContact.
        :type emails: List[str]
        """
        if emails is None:
            raise ValueError("Invalid value for `emails`, must not be `None`")  # noqa: E501
        if emails is not None and len(emails) < 1:
            raise ValueError("Invalid value for `emails`, number of items must be greater than or equal to `1`")  # noqa: E501

        self._emails = emails

    @property
    def addresses(self):
        """Gets the addresses of this AccountContact.

        Physical mail addresses associated with the account. Plaid expects your organization to return an empty array if this information isn't available.   # noqa: E501

        :return: The addresses of this AccountContact.
        :rtype: List[DeliveryAddress]
        """
        return self._addresses

    @addresses.setter
    def addresses(self, addresses):
        """Sets the addresses of this AccountContact.

        Physical mail addresses associated with the account. Plaid expects your organization to return an empty array if this information isn't available.   # noqa: E501

        :param addresses: The addresses of this AccountContact.
        :type addresses: List[DeliveryAddress]
        """
        if addresses is None:
            raise ValueError("Invalid value for `addresses`, must not be `None`")  # noqa: E501
        if addresses is not None and len(addresses) < 1:
            raise ValueError("Invalid value for `addresses`, number of items must be greater than or equal to `1`")  # noqa: E501

        self._addresses = addresses

    @property
    def telephones(self):
        """Gets the telephones of this AccountContact.

        Telephone numbers associated with the account. Plaid expects your organization to return an empty array if this information isn't available.   # noqa: E501

        :return: The telephones of this AccountContact.
        :rtype: List[TelephoneNumber]
        """
        return self._telephones

    @telephones.setter
    def telephones(self, telephones):
        """Sets the telephones of this AccountContact.

        Telephone numbers associated with the account. Plaid expects your organization to return an empty array if this information isn't available.   # noqa: E501

        :param telephones: The telephones of this AccountContact.
        :type telephones: List[TelephoneNumber]
        """
        if telephones is None:
            raise ValueError("Invalid value for `telephones`, must not be `None`")  # noqa: E501
        if telephones is not None and len(telephones) < 1:
            raise ValueError("Invalid value for `telephones`, number of items must be greater than or equal to `1`")  # noqa: E501

        self._telephones = telephones
