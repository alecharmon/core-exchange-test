# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.account_with_descriptor import AccountWithDescriptor
from openapi_server.models.page_metadata import PageMetadata
from openapi_server import util

from openapi_server.models.account_with_descriptor import AccountWithDescriptor  # noqa: E501
from openapi_server.models.page_metadata import PageMetadata  # noqa: E501

class Accounts(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, page=None, accounts=None):  # noqa: E501
        """Accounts - a model defined in OpenAPI

        :param page: The page of this Accounts.  # noqa: E501
        :type page: PageMetadata
        :param accounts: The accounts of this Accounts.  # noqa: E501
        :type accounts: List[AccountWithDescriptor]
        """
        self.openapi_types = {
            'page': PageMetadata,
            'accounts': List[AccountWithDescriptor]
        }

        self.attribute_map = {
            'page': 'page',
            'accounts': 'accounts'
        }

        self._page = page
        self._accounts = accounts

    @classmethod
    def from_dict(cls, dikt) -> 'Accounts':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Accounts of this Accounts.  # noqa: E501
        :rtype: Accounts
        """
        return util.deserialize_model(dikt, cls)

    @property
    def page(self):
        """Gets the page of this Accounts.


        :return: The page of this Accounts.
        :rtype: PageMetadata
        """
        return self._page

    @page.setter
    def page(self, page):
        """Sets the page of this Accounts.


        :param page: The page of this Accounts.
        :type page: PageMetadata
        """

        self._page = page

    @property
    def accounts(self):
        """Gets the accounts of this Accounts.

        An array of accounts with entity types dependent on the account type (deposit, investment, loan, or line of credit). Plaid expects your organization to return an empty array if this information isn't available. Plaid accepts all account types for this endpoint but consumes account details through `GET accounts/{accountID}` solely for deposit, investment, loan, and line of credit accounts.   # noqa: E501

        :return: The accounts of this Accounts.
        :rtype: List[AccountWithDescriptor]
        """
        return self._accounts

    @accounts.setter
    def accounts(self, accounts):
        """Sets the accounts of this Accounts.

        An array of accounts with entity types dependent on the account type (deposit, investment, loan, or line of credit). Plaid expects your organization to return an empty array if this information isn't available. Plaid accepts all account types for this endpoint but consumes account details through `GET accounts/{accountID}` solely for deposit, investment, loan, and line of credit accounts.   # noqa: E501

        :param accounts: The accounts of this Accounts.
        :type accounts: List[AccountWithDescriptor]
        """
        if accounts is None:
            raise ValueError("Invalid value for `accounts`, must not be `None`")  # noqa: E501
        if accounts is not None and len(accounts) < 1:
            raise ValueError("Invalid value for `accounts`, number of items must be greater than or equal to `1`")  # noqa: E501

        self._accounts = accounts
