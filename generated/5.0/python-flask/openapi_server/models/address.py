# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.iso3166_country_code import Iso3166CountryCode
from openapi_server import util

from openapi_server.models.iso3166_country_code import Iso3166CountryCode  # noqa: E501

class Address(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, line1=None, line2=None, line3=None, city=None, region=None, postal_code=None, country=None):  # noqa: E501
        """Address - a model defined in OpenAPI

        :param line1: The line1 of this Address.  # noqa: E501
        :type line1: str
        :param line2: The line2 of this Address.  # noqa: E501
        :type line2: str
        :param line3: The line3 of this Address.  # noqa: E501
        :type line3: str
        :param city: The city of this Address.  # noqa: E501
        :type city: str
        :param region: The region of this Address.  # noqa: E501
        :type region: str
        :param postal_code: The postal_code of this Address.  # noqa: E501
        :type postal_code: str
        :param country: The country of this Address.  # noqa: E501
        :type country: Iso3166CountryCode
        """
        self.openapi_types = {
            'line1': str,
            'line2': str,
            'line3': str,
            'city': str,
            'region': str,
            'postal_code': str,
            'country': Iso3166CountryCode
        }

        self.attribute_map = {
            'line1': 'line1',
            'line2': 'line2',
            'line3': 'line3',
            'city': 'city',
            'region': 'region',
            'postal_code': 'postalCode',
            'country': 'country'
        }

        self._line1 = line1
        self._line2 = line2
        self._line3 = line3
        self._city = city
        self._region = region
        self._postal_code = postal_code
        self._country = country

    @classmethod
    def from_dict(cls, dikt) -> 'Address':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Address of this Address.  # noqa: E501
        :rtype: Address
        """
        return util.deserialize_model(dikt, cls)

    @property
    def line1(self):
        """Gets the line1 of this Address.

        String of maximum length 64  # noqa: E501

        :return: The line1 of this Address.
        :rtype: str
        """
        return self._line1

    @line1.setter
    def line1(self, line1):
        """Sets the line1 of this Address.

        String of maximum length 64  # noqa: E501

        :param line1: The line1 of this Address.
        :type line1: str
        """
        if line1 is None:
            raise ValueError("Invalid value for `line1`, must not be `None`")  # noqa: E501
        if line1 is not None and len(line1) > 64:
            raise ValueError("Invalid value for `line1`, length must be less than or equal to `64`")  # noqa: E501

        self._line1 = line1

    @property
    def line2(self):
        """Gets the line2 of this Address.

        String of maximum length 64  # noqa: E501

        :return: The line2 of this Address.
        :rtype: str
        """
        return self._line2

    @line2.setter
    def line2(self, line2):
        """Sets the line2 of this Address.

        String of maximum length 64  # noqa: E501

        :param line2: The line2 of this Address.
        :type line2: str
        """
        if line2 is not None and len(line2) > 64:
            raise ValueError("Invalid value for `line2`, length must be less than or equal to `64`")  # noqa: E501

        self._line2 = line2

    @property
    def line3(self):
        """Gets the line3 of this Address.

        String of maximum length 64  # noqa: E501

        :return: The line3 of this Address.
        :rtype: str
        """
        return self._line3

    @line3.setter
    def line3(self, line3):
        """Sets the line3 of this Address.

        String of maximum length 64  # noqa: E501

        :param line3: The line3 of this Address.
        :type line3: str
        """
        if line3 is not None and len(line3) > 64:
            raise ValueError("Invalid value for `line3`, length must be less than or equal to `64`")  # noqa: E501

        self._line3 = line3

    @property
    def city(self):
        """Gets the city of this Address.

        String of maximum length 64  # noqa: E501

        :return: The city of this Address.
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """Sets the city of this Address.

        String of maximum length 64  # noqa: E501

        :param city: The city of this Address.
        :type city: str
        """
        if city is None:
            raise ValueError("Invalid value for `city`, must not be `None`")  # noqa: E501
        if city is not None and len(city) > 64:
            raise ValueError("Invalid value for `city`, length must be less than or equal to `64`")  # noqa: E501

        self._city = city

    @property
    def region(self):
        """Gets the region of this Address.

        String of maximum length 64  # noqa: E501

        :return: The region of this Address.
        :rtype: str
        """
        return self._region

    @region.setter
    def region(self, region):
        """Sets the region of this Address.

        String of maximum length 64  # noqa: E501

        :param region: The region of this Address.
        :type region: str
        """
        if region is not None and len(region) > 64:
            raise ValueError("Invalid value for `region`, length must be less than or equal to `64`")  # noqa: E501

        self._region = region

    @property
    def postal_code(self):
        """Gets the postal_code of this Address.

        Postal code  # noqa: E501

        :return: The postal_code of this Address.
        :rtype: str
        """
        return self._postal_code

    @postal_code.setter
    def postal_code(self, postal_code):
        """Sets the postal_code of this Address.

        Postal code  # noqa: E501

        :param postal_code: The postal_code of this Address.
        :type postal_code: str
        """
        if postal_code is not None and len(postal_code) > 16:
            raise ValueError("Invalid value for `postal_code`, length must be less than or equal to `16`")  # noqa: E501

        self._postal_code = postal_code

    @property
    def country(self):
        """Gets the country of this Address.


        :return: The country of this Address.
        :rtype: Iso3166CountryCode
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this Address.


        :param country: The country of this Address.
        :type country: Iso3166CountryCode
        """
        if country is None:
            raise ValueError("Invalid value for `country`, must not be `None`")  # noqa: E501

        self._country = country
