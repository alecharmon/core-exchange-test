# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.debit_credit_memo import DebitCreditMemo
from openapi_server.models.deposit_transaction_type import DepositTransactionType
from openapi_server.models.iso4217_code import Iso4217Code
from openapi_server.models.transaction_status import TransactionStatus
from openapi_server import util

from openapi_server.models.debit_credit_memo import DebitCreditMemo  # noqa: E501
from openapi_server.models.deposit_transaction_type import DepositTransactionType  # noqa: E501
from openapi_server.models.iso4217_code import Iso4217Code  # noqa: E501
from openapi_server.models.transaction_status import TransactionStatus  # noqa: E501

class DepositTransaction(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, transaction_id=None, reference_transaction_id=None, posted_timestamp=None, transaction_timestamp=None, description=None, debit_credit_memo=None, category=None, sub_category=None, status=None, amount=None, foreign_amount=None, foreign_currency=None, transaction_type=None, payee=None, check_number=None):  # noqa: E501
        """DepositTransaction - a model defined in OpenAPI

        :param transaction_id: The transaction_id of this DepositTransaction.  # noqa: E501
        :type transaction_id: str
        :param reference_transaction_id: The reference_transaction_id of this DepositTransaction.  # noqa: E501
        :type reference_transaction_id: str
        :param posted_timestamp: The posted_timestamp of this DepositTransaction.  # noqa: E501
        :type posted_timestamp: datetime
        :param transaction_timestamp: The transaction_timestamp of this DepositTransaction.  # noqa: E501
        :type transaction_timestamp: datetime
        :param description: The description of this DepositTransaction.  # noqa: E501
        :type description: str
        :param debit_credit_memo: The debit_credit_memo of this DepositTransaction.  # noqa: E501
        :type debit_credit_memo: DebitCreditMemo
        :param category: The category of this DepositTransaction.  # noqa: E501
        :type category: str
        :param sub_category: The sub_category of this DepositTransaction.  # noqa: E501
        :type sub_category: str
        :param status: The status of this DepositTransaction.  # noqa: E501
        :type status: TransactionStatus
        :param amount: The amount of this DepositTransaction.  # noqa: E501
        :type amount: float
        :param foreign_amount: The foreign_amount of this DepositTransaction.  # noqa: E501
        :type foreign_amount: float
        :param foreign_currency: The foreign_currency of this DepositTransaction.  # noqa: E501
        :type foreign_currency: Iso4217Code
        :param transaction_type: The transaction_type of this DepositTransaction.  # noqa: E501
        :type transaction_type: DepositTransactionType
        :param payee: The payee of this DepositTransaction.  # noqa: E501
        :type payee: str
        :param check_number: The check_number of this DepositTransaction.  # noqa: E501
        :type check_number: int
        """
        self.openapi_types = {
            'transaction_id': str,
            'reference_transaction_id': str,
            'posted_timestamp': datetime,
            'transaction_timestamp': datetime,
            'description': str,
            'debit_credit_memo': DebitCreditMemo,
            'category': str,
            'sub_category': str,
            'status': TransactionStatus,
            'amount': float,
            'foreign_amount': float,
            'foreign_currency': Iso4217Code,
            'transaction_type': DepositTransactionType,
            'payee': str,
            'check_number': int
        }

        self.attribute_map = {
            'transaction_id': 'transactionId',
            'reference_transaction_id': 'referenceTransactionId',
            'posted_timestamp': 'postedTimestamp',
            'transaction_timestamp': 'transactionTimestamp',
            'description': 'description',
            'debit_credit_memo': 'debitCreditMemo',
            'category': 'category',
            'sub_category': 'subCategory',
            'status': 'status',
            'amount': 'amount',
            'foreign_amount': 'foreignAmount',
            'foreign_currency': 'foreignCurrency',
            'transaction_type': 'transactionType',
            'payee': 'payee',
            'check_number': 'checkNumber'
        }

        self._transaction_id = transaction_id
        self._reference_transaction_id = reference_transaction_id
        self._posted_timestamp = posted_timestamp
        self._transaction_timestamp = transaction_timestamp
        self._description = description
        self._debit_credit_memo = debit_credit_memo
        self._category = category
        self._sub_category = sub_category
        self._status = status
        self._amount = amount
        self._foreign_amount = foreign_amount
        self._foreign_currency = foreign_currency
        self._transaction_type = transaction_type
        self._payee = payee
        self._check_number = check_number

    @classmethod
    def from_dict(cls, dikt) -> 'DepositTransaction':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The DepositTransaction of this DepositTransaction.  # noqa: E501
        :rtype: DepositTransaction
        """
        return util.deserialize_model(dikt, cls)

    @property
    def transaction_id(self):
        """Gets the transaction_id of this DepositTransaction.

        Value for a unique identifier  # noqa: E501

        :return: The transaction_id of this DepositTransaction.
        :rtype: str
        """
        return self._transaction_id

    @transaction_id.setter
    def transaction_id(self, transaction_id):
        """Sets the transaction_id of this DepositTransaction.

        Value for a unique identifier  # noqa: E501

        :param transaction_id: The transaction_id of this DepositTransaction.
        :type transaction_id: str
        """
        if transaction_id is None:
            raise ValueError("Invalid value for `transaction_id`, must not be `None`")  # noqa: E501
        if transaction_id is not None and len(transaction_id) > 256:
            raise ValueError("Invalid value for `transaction_id`, length must be less than or equal to `256`")  # noqa: E501

        self._transaction_id = transaction_id

    @property
    def reference_transaction_id(self):
        """Gets the reference_transaction_id of this DepositTransaction.

        Value for a unique identifier  # noqa: E501

        :return: The reference_transaction_id of this DepositTransaction.
        :rtype: str
        """
        return self._reference_transaction_id

    @reference_transaction_id.setter
    def reference_transaction_id(self, reference_transaction_id):
        """Sets the reference_transaction_id of this DepositTransaction.

        Value for a unique identifier  # noqa: E501

        :param reference_transaction_id: The reference_transaction_id of this DepositTransaction.
        :type reference_transaction_id: str
        """
        if reference_transaction_id is not None and len(reference_transaction_id) > 256:
            raise ValueError("Invalid value for `reference_transaction_id`, length must be less than or equal to `256`")  # noqa: E501

        self._reference_transaction_id = reference_transaction_id

    @property
    def posted_timestamp(self):
        """Gets the posted_timestamp of this DepositTransaction.

        ISO 8601 date-time in format 'YYYY-MM-DDThh:mm:ss.nnn[Z|[+|-]hh:mm]' according to [IETF RFC3339](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#anchor14)  # noqa: E501

        :return: The posted_timestamp of this DepositTransaction.
        :rtype: datetime
        """
        return self._posted_timestamp

    @posted_timestamp.setter
    def posted_timestamp(self, posted_timestamp):
        """Sets the posted_timestamp of this DepositTransaction.

        ISO 8601 date-time in format 'YYYY-MM-DDThh:mm:ss.nnn[Z|[+|-]hh:mm]' according to [IETF RFC3339](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#anchor14)  # noqa: E501

        :param posted_timestamp: The posted_timestamp of this DepositTransaction.
        :type posted_timestamp: datetime
        """

        self._posted_timestamp = posted_timestamp

    @property
    def transaction_timestamp(self):
        """Gets the transaction_timestamp of this DepositTransaction.

        ISO 8601 date-time in format 'YYYY-MM-DDThh:mm:ss.nnn[Z|[+|-]hh:mm]' according to [IETF RFC3339](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#anchor14)  # noqa: E501

        :return: The transaction_timestamp of this DepositTransaction.
        :rtype: datetime
        """
        return self._transaction_timestamp

    @transaction_timestamp.setter
    def transaction_timestamp(self, transaction_timestamp):
        """Sets the transaction_timestamp of this DepositTransaction.

        ISO 8601 date-time in format 'YYYY-MM-DDThh:mm:ss.nnn[Z|[+|-]hh:mm]' according to [IETF RFC3339](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#anchor14)  # noqa: E501

        :param transaction_timestamp: The transaction_timestamp of this DepositTransaction.
        :type transaction_timestamp: datetime
        """
        if transaction_timestamp is None:
            raise ValueError("Invalid value for `transaction_timestamp`, must not be `None`")  # noqa: E501

        self._transaction_timestamp = transaction_timestamp

    @property
    def description(self):
        """Gets the description of this DepositTransaction.

        The description of the transaction  # noqa: E501

        :return: The description of this DepositTransaction.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this DepositTransaction.

        The description of the transaction  # noqa: E501

        :param description: The description of this DepositTransaction.
        :type description: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")  # noqa: E501

        self._description = description

    @property
    def debit_credit_memo(self):
        """Gets the debit_credit_memo of this DepositTransaction.


        :return: The debit_credit_memo of this DepositTransaction.
        :rtype: DebitCreditMemo
        """
        return self._debit_credit_memo

    @debit_credit_memo.setter
    def debit_credit_memo(self, debit_credit_memo):
        """Sets the debit_credit_memo of this DepositTransaction.


        :param debit_credit_memo: The debit_credit_memo of this DepositTransaction.
        :type debit_credit_memo: DebitCreditMemo
        """
        if debit_credit_memo is None:
            raise ValueError("Invalid value for `debit_credit_memo`, must not be `None`")  # noqa: E501

        self._debit_credit_memo = debit_credit_memo

    @property
    def category(self):
        """Gets the category of this DepositTransaction.

        Transaction category, preferably MCC or SIC. Plaid expects your organization to provide MCC, if available and applicable.   # noqa: E501

        :return: The category of this DepositTransaction.
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this DepositTransaction.

        Transaction category, preferably MCC or SIC. Plaid expects your organization to provide MCC, if available and applicable.   # noqa: E501

        :param category: The category of this DepositTransaction.
        :type category: str
        """

        self._category = category

    @property
    def sub_category(self):
        """Gets the sub_category of this DepositTransaction.

        Transaction category detail  # noqa: E501

        :return: The sub_category of this DepositTransaction.
        :rtype: str
        """
        return self._sub_category

    @sub_category.setter
    def sub_category(self, sub_category):
        """Sets the sub_category of this DepositTransaction.

        Transaction category detail  # noqa: E501

        :param sub_category: The sub_category of this DepositTransaction.
        :type sub_category: str
        """

        self._sub_category = sub_category

    @property
    def status(self):
        """Gets the status of this DepositTransaction.


        :return: The status of this DepositTransaction.
        :rtype: TransactionStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this DepositTransaction.


        :param status: The status of this DepositTransaction.
        :type status: TransactionStatus
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")  # noqa: E501

        self._status = status

    @property
    def amount(self):
        """Gets the amount of this DepositTransaction.

        The amount of money in the account currency  # noqa: E501

        :return: The amount of this DepositTransaction.
        :rtype: float
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this DepositTransaction.

        The amount of money in the account currency  # noqa: E501

        :param amount: The amount of this DepositTransaction.
        :type amount: float
        """
        if amount is None:
            raise ValueError("Invalid value for `amount`, must not be `None`")  # noqa: E501

        self._amount = amount

    @property
    def foreign_amount(self):
        """Gets the foreign_amount of this DepositTransaction.

        The amount of money in the foreign currency. If this amount is specified, then Plaid expects that the `foreignCurrency` property is also set.  # noqa: E501

        :return: The foreign_amount of this DepositTransaction.
        :rtype: float
        """
        return self._foreign_amount

    @foreign_amount.setter
    def foreign_amount(self, foreign_amount):
        """Sets the foreign_amount of this DepositTransaction.

        The amount of money in the foreign currency. If this amount is specified, then Plaid expects that the `foreignCurrency` property is also set.  # noqa: E501

        :param foreign_amount: The foreign_amount of this DepositTransaction.
        :type foreign_amount: float
        """

        self._foreign_amount = foreign_amount

    @property
    def foreign_currency(self):
        """Gets the foreign_currency of this DepositTransaction.


        :return: The foreign_currency of this DepositTransaction.
        :rtype: Iso4217Code
        """
        return self._foreign_currency

    @foreign_currency.setter
    def foreign_currency(self, foreign_currency):
        """Sets the foreign_currency of this DepositTransaction.


        :param foreign_currency: The foreign_currency of this DepositTransaction.
        :type foreign_currency: Iso4217Code
        """

        self._foreign_currency = foreign_currency

    @property
    def transaction_type(self):
        """Gets the transaction_type of this DepositTransaction.


        :return: The transaction_type of this DepositTransaction.
        :rtype: DepositTransactionType
        """
        return self._transaction_type

    @transaction_type.setter
    def transaction_type(self, transaction_type):
        """Sets the transaction_type of this DepositTransaction.


        :param transaction_type: The transaction_type of this DepositTransaction.
        :type transaction_type: DepositTransactionType
        """

        self._transaction_type = transaction_type

    @property
    def payee(self):
        """Gets the payee of this DepositTransaction.

        String of maximum length 255  # noqa: E501

        :return: The payee of this DepositTransaction.
        :rtype: str
        """
        return self._payee

    @payee.setter
    def payee(self, payee):
        """Sets the payee of this DepositTransaction.

        String of maximum length 255  # noqa: E501

        :param payee: The payee of this DepositTransaction.
        :type payee: str
        """
        if payee is not None and len(payee) > 255:
            raise ValueError("Invalid value for `payee`, length must be less than or equal to `255`")  # noqa: E501

        self._payee = payee

    @property
    def check_number(self):
        """Gets the check_number of this DepositTransaction.

        Check number. Plaid expects this solely if the transaction involves a check.   # noqa: E501

        :return: The check_number of this DepositTransaction.
        :rtype: int
        """
        return self._check_number

    @check_number.setter
    def check_number(self, check_number):
        """Sets the check_number of this DepositTransaction.

        Check number. Plaid expects this solely if the transaction involves a check.   # noqa: E501

        :param check_number: The check_number of this DepositTransaction.
        :type check_number: int
        """

        self._check_number = check_number
