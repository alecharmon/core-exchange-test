# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.holding import Holding
from openapi_server import util

from openapi_server.models.holding import Holding  # noqa: E501

class InvestmentAccountAllOf(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, available_cash_balance=None, balance_as_of=None, current_value=None, holdings=None):  # noqa: E501
        """InvestmentAccountAllOf - a model defined in OpenAPI

        :param available_cash_balance: The available_cash_balance of this InvestmentAccountAllOf.  # noqa: E501
        :type available_cash_balance: float
        :param balance_as_of: The balance_as_of of this InvestmentAccountAllOf.  # noqa: E501
        :type balance_as_of: datetime
        :param current_value: The current_value of this InvestmentAccountAllOf.  # noqa: E501
        :type current_value: float
        :param holdings: The holdings of this InvestmentAccountAllOf.  # noqa: E501
        :type holdings: List[Holding]
        """
        self.openapi_types = {
            'available_cash_balance': float,
            'balance_as_of': datetime,
            'current_value': float,
            'holdings': List[Holding]
        }

        self.attribute_map = {
            'available_cash_balance': 'availableCashBalance',
            'balance_as_of': 'balanceAsOf',
            'current_value': 'currentValue',
            'holdings': 'holdings'
        }

        self._available_cash_balance = available_cash_balance
        self._balance_as_of = balance_as_of
        self._current_value = current_value
        self._holdings = holdings

    @classmethod
    def from_dict(cls, dikt) -> 'InvestmentAccountAllOf':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The InvestmentAccount_allOf of this InvestmentAccountAllOf.  # noqa: E501
        :rtype: InvestmentAccountAllOf
        """
        return util.deserialize_model(dikt, cls)

    @property
    def available_cash_balance(self):
        """Gets the available_cash_balance of this InvestmentAccountAllOf.

        Cash balance across all sub-accounts. Plaid expects that this includes sweep funds.  # noqa: E501

        :return: The available_cash_balance of this InvestmentAccountAllOf.
        :rtype: float
        """
        return self._available_cash_balance

    @available_cash_balance.setter
    def available_cash_balance(self, available_cash_balance):
        """Sets the available_cash_balance of this InvestmentAccountAllOf.

        Cash balance across all sub-accounts. Plaid expects that this includes sweep funds.  # noqa: E501

        :param available_cash_balance: The available_cash_balance of this InvestmentAccountAllOf.
        :type available_cash_balance: float
        """
        if available_cash_balance is None:
            raise ValueError("Invalid value for `available_cash_balance`, must not be `None`")  # noqa: E501

        self._available_cash_balance = available_cash_balance

    @property
    def balance_as_of(self):
        """Gets the balance_as_of of this InvestmentAccountAllOf.

        ISO 8601 date-time in format 'YYYY-MM-DDThh:mm:ss.nnn[Z|[+|-]hh:mm]' according to [IETF RFC3339](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#anchor14)  # noqa: E501

        :return: The balance_as_of of this InvestmentAccountAllOf.
        :rtype: datetime
        """
        return self._balance_as_of

    @balance_as_of.setter
    def balance_as_of(self, balance_as_of):
        """Sets the balance_as_of of this InvestmentAccountAllOf.

        ISO 8601 date-time in format 'YYYY-MM-DDThh:mm:ss.nnn[Z|[+|-]hh:mm]' according to [IETF RFC3339](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#anchor14)  # noqa: E501

        :param balance_as_of: The balance_as_of of this InvestmentAccountAllOf.
        :type balance_as_of: datetime
        """

        self._balance_as_of = balance_as_of

    @property
    def current_value(self):
        """Gets the current_value of this InvestmentAccountAllOf.

        Total current value of all investments.  # noqa: E501

        :return: The current_value of this InvestmentAccountAllOf.
        :rtype: float
        """
        return self._current_value

    @current_value.setter
    def current_value(self, current_value):
        """Sets the current_value of this InvestmentAccountAllOf.

        Total current value of all investments.  # noqa: E501

        :param current_value: The current_value of this InvestmentAccountAllOf.
        :type current_value: float
        """
        if current_value is None:
            raise ValueError("Invalid value for `current_value`, must not be `None`")  # noqa: E501

        self._current_value = current_value

    @property
    def holdings(self):
        """Gets the holdings of this InvestmentAccountAllOf.

        Holdings in the investment account. Plaid maps the `holding` and the `investmentAccount` FDX models to its securities models, which hold universal information like the ticker symbol, and to its holdings models, which hold account-specific information like balances. For more information, see [Plaid investments](https://plaid.com/docs/investments/#securities-and-holdings).   # noqa: E501

        :return: The holdings of this InvestmentAccountAllOf.
        :rtype: List[Holding]
        """
        return self._holdings

    @holdings.setter
    def holdings(self, holdings):
        """Sets the holdings of this InvestmentAccountAllOf.

        Holdings in the investment account. Plaid maps the `holding` and the `investmentAccount` FDX models to its securities models, which hold universal information like the ticker symbol, and to its holdings models, which hold account-specific information like balances. For more information, see [Plaid investments](https://plaid.com/docs/investments/#securities-and-holdings).   # noqa: E501

        :param holdings: The holdings of this InvestmentAccountAllOf.
        :type holdings: List[Holding]
        """

        self._holdings = holdings
