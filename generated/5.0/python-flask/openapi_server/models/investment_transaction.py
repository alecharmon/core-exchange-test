# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.debit_credit_memo import DebitCreditMemo
from openapi_server.models.fi_attribute import FiAttribute
from openapi_server.models.investment_transaction_type import InvestmentTransactionType
from openapi_server.models.iso4217_code import Iso4217Code
from openapi_server.models.security_id_type import SecurityIdType
from openapi_server.models.security_type import SecurityType
from openapi_server.models.transaction_status import TransactionStatus
from openapi_server.models.unit_type import UnitType
from openapi_server import util

from openapi_server.models.debit_credit_memo import DebitCreditMemo  # noqa: E501
from openapi_server.models.fi_attribute import FiAttribute  # noqa: E501
from openapi_server.models.investment_transaction_type import InvestmentTransactionType  # noqa: E501
from openapi_server.models.iso4217_code import Iso4217Code  # noqa: E501
from openapi_server.models.security_id_type import SecurityIdType  # noqa: E501
from openapi_server.models.security_type import SecurityType  # noqa: E501
from openapi_server.models.transaction_status import TransactionStatus  # noqa: E501
from openapi_server.models.unit_type import UnitType  # noqa: E501

class InvestmentTransaction(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, transaction_id=None, reference_transaction_id=None, posted_timestamp=None, transaction_timestamp=None, description=None, debit_credit_memo=None, category=None, sub_category=None, status=None, amount=None, foreign_amount=None, foreign_currency=None, transaction_type=None, security_id=None, security_id_type=None, security_type=None, symbol=None, commission=None, fees=None, unit_price=None, units=None, unit_type=None, fi_attributes=None):  # noqa: E501
        """InvestmentTransaction - a model defined in OpenAPI

        :param transaction_id: The transaction_id of this InvestmentTransaction.  # noqa: E501
        :type transaction_id: str
        :param reference_transaction_id: The reference_transaction_id of this InvestmentTransaction.  # noqa: E501
        :type reference_transaction_id: str
        :param posted_timestamp: The posted_timestamp of this InvestmentTransaction.  # noqa: E501
        :type posted_timestamp: datetime
        :param transaction_timestamp: The transaction_timestamp of this InvestmentTransaction.  # noqa: E501
        :type transaction_timestamp: datetime
        :param description: The description of this InvestmentTransaction.  # noqa: E501
        :type description: str
        :param debit_credit_memo: The debit_credit_memo of this InvestmentTransaction.  # noqa: E501
        :type debit_credit_memo: DebitCreditMemo
        :param category: The category of this InvestmentTransaction.  # noqa: E501
        :type category: str
        :param sub_category: The sub_category of this InvestmentTransaction.  # noqa: E501
        :type sub_category: str
        :param status: The status of this InvestmentTransaction.  # noqa: E501
        :type status: TransactionStatus
        :param amount: The amount of this InvestmentTransaction.  # noqa: E501
        :type amount: float
        :param foreign_amount: The foreign_amount of this InvestmentTransaction.  # noqa: E501
        :type foreign_amount: float
        :param foreign_currency: The foreign_currency of this InvestmentTransaction.  # noqa: E501
        :type foreign_currency: Iso4217Code
        :param transaction_type: The transaction_type of this InvestmentTransaction.  # noqa: E501
        :type transaction_type: InvestmentTransactionType
        :param security_id: The security_id of this InvestmentTransaction.  # noqa: E501
        :type security_id: str
        :param security_id_type: The security_id_type of this InvestmentTransaction.  # noqa: E501
        :type security_id_type: SecurityIdType
        :param security_type: The security_type of this InvestmentTransaction.  # noqa: E501
        :type security_type: SecurityType
        :param symbol: The symbol of this InvestmentTransaction.  # noqa: E501
        :type symbol: str
        :param commission: The commission of this InvestmentTransaction.  # noqa: E501
        :type commission: float
        :param fees: The fees of this InvestmentTransaction.  # noqa: E501
        :type fees: float
        :param unit_price: The unit_price of this InvestmentTransaction.  # noqa: E501
        :type unit_price: float
        :param units: The units of this InvestmentTransaction.  # noqa: E501
        :type units: float
        :param unit_type: The unit_type of this InvestmentTransaction.  # noqa: E501
        :type unit_type: UnitType
        :param fi_attributes: The fi_attributes of this InvestmentTransaction.  # noqa: E501
        :type fi_attributes: List[FiAttribute]
        """
        self.openapi_types = {
            'transaction_id': str,
            'reference_transaction_id': str,
            'posted_timestamp': datetime,
            'transaction_timestamp': datetime,
            'description': str,
            'debit_credit_memo': DebitCreditMemo,
            'category': str,
            'sub_category': str,
            'status': TransactionStatus,
            'amount': float,
            'foreign_amount': float,
            'foreign_currency': Iso4217Code,
            'transaction_type': InvestmentTransactionType,
            'security_id': str,
            'security_id_type': SecurityIdType,
            'security_type': SecurityType,
            'symbol': str,
            'commission': float,
            'fees': float,
            'unit_price': float,
            'units': float,
            'unit_type': UnitType,
            'fi_attributes': List[FiAttribute]
        }

        self.attribute_map = {
            'transaction_id': 'transactionId',
            'reference_transaction_id': 'referenceTransactionId',
            'posted_timestamp': 'postedTimestamp',
            'transaction_timestamp': 'transactionTimestamp',
            'description': 'description',
            'debit_credit_memo': 'debitCreditMemo',
            'category': 'category',
            'sub_category': 'subCategory',
            'status': 'status',
            'amount': 'amount',
            'foreign_amount': 'foreignAmount',
            'foreign_currency': 'foreignCurrency',
            'transaction_type': 'transactionType',
            'security_id': 'securityId',
            'security_id_type': 'securityIdType',
            'security_type': 'securityType',
            'symbol': 'symbol',
            'commission': 'commission',
            'fees': 'fees',
            'unit_price': 'unitPrice',
            'units': 'units',
            'unit_type': 'unitType',
            'fi_attributes': 'fiAttributes'
        }

        self._transaction_id = transaction_id
        self._reference_transaction_id = reference_transaction_id
        self._posted_timestamp = posted_timestamp
        self._transaction_timestamp = transaction_timestamp
        self._description = description
        self._debit_credit_memo = debit_credit_memo
        self._category = category
        self._sub_category = sub_category
        self._status = status
        self._amount = amount
        self._foreign_amount = foreign_amount
        self._foreign_currency = foreign_currency
        self._transaction_type = transaction_type
        self._security_id = security_id
        self._security_id_type = security_id_type
        self._security_type = security_type
        self._symbol = symbol
        self._commission = commission
        self._fees = fees
        self._unit_price = unit_price
        self._units = units
        self._unit_type = unit_type
        self._fi_attributes = fi_attributes

    @classmethod
    def from_dict(cls, dikt) -> 'InvestmentTransaction':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The InvestmentTransaction of this InvestmentTransaction.  # noqa: E501
        :rtype: InvestmentTransaction
        """
        return util.deserialize_model(dikt, cls)

    @property
    def transaction_id(self):
        """Gets the transaction_id of this InvestmentTransaction.

        Value for a unique identifier  # noqa: E501

        :return: The transaction_id of this InvestmentTransaction.
        :rtype: str
        """
        return self._transaction_id

    @transaction_id.setter
    def transaction_id(self, transaction_id):
        """Sets the transaction_id of this InvestmentTransaction.

        Value for a unique identifier  # noqa: E501

        :param transaction_id: The transaction_id of this InvestmentTransaction.
        :type transaction_id: str
        """
        if transaction_id is None:
            raise ValueError("Invalid value for `transaction_id`, must not be `None`")  # noqa: E501
        if transaction_id is not None and len(transaction_id) > 256:
            raise ValueError("Invalid value for `transaction_id`, length must be less than or equal to `256`")  # noqa: E501

        self._transaction_id = transaction_id

    @property
    def reference_transaction_id(self):
        """Gets the reference_transaction_id of this InvestmentTransaction.

        Value for a unique identifier  # noqa: E501

        :return: The reference_transaction_id of this InvestmentTransaction.
        :rtype: str
        """
        return self._reference_transaction_id

    @reference_transaction_id.setter
    def reference_transaction_id(self, reference_transaction_id):
        """Sets the reference_transaction_id of this InvestmentTransaction.

        Value for a unique identifier  # noqa: E501

        :param reference_transaction_id: The reference_transaction_id of this InvestmentTransaction.
        :type reference_transaction_id: str
        """
        if reference_transaction_id is not None and len(reference_transaction_id) > 256:
            raise ValueError("Invalid value for `reference_transaction_id`, length must be less than or equal to `256`")  # noqa: E501

        self._reference_transaction_id = reference_transaction_id

    @property
    def posted_timestamp(self):
        """Gets the posted_timestamp of this InvestmentTransaction.

        ISO 8601 date-time in format 'YYYY-MM-DDThh:mm:ss.nnn[Z|[+|-]hh:mm]' according to [IETF RFC3339](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#anchor14)  # noqa: E501

        :return: The posted_timestamp of this InvestmentTransaction.
        :rtype: datetime
        """
        return self._posted_timestamp

    @posted_timestamp.setter
    def posted_timestamp(self, posted_timestamp):
        """Sets the posted_timestamp of this InvestmentTransaction.

        ISO 8601 date-time in format 'YYYY-MM-DDThh:mm:ss.nnn[Z|[+|-]hh:mm]' according to [IETF RFC3339](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#anchor14)  # noqa: E501

        :param posted_timestamp: The posted_timestamp of this InvestmentTransaction.
        :type posted_timestamp: datetime
        """

        self._posted_timestamp = posted_timestamp

    @property
    def transaction_timestamp(self):
        """Gets the transaction_timestamp of this InvestmentTransaction.

        ISO 8601 date-time in format 'YYYY-MM-DDThh:mm:ss.nnn[Z|[+|-]hh:mm]' according to [IETF RFC3339](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#anchor14)  # noqa: E501

        :return: The transaction_timestamp of this InvestmentTransaction.
        :rtype: datetime
        """
        return self._transaction_timestamp

    @transaction_timestamp.setter
    def transaction_timestamp(self, transaction_timestamp):
        """Sets the transaction_timestamp of this InvestmentTransaction.

        ISO 8601 date-time in format 'YYYY-MM-DDThh:mm:ss.nnn[Z|[+|-]hh:mm]' according to [IETF RFC3339](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#anchor14)  # noqa: E501

        :param transaction_timestamp: The transaction_timestamp of this InvestmentTransaction.
        :type transaction_timestamp: datetime
        """
        if transaction_timestamp is None:
            raise ValueError("Invalid value for `transaction_timestamp`, must not be `None`")  # noqa: E501

        self._transaction_timestamp = transaction_timestamp

    @property
    def description(self):
        """Gets the description of this InvestmentTransaction.

        The description of the transaction  # noqa: E501

        :return: The description of this InvestmentTransaction.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this InvestmentTransaction.

        The description of the transaction  # noqa: E501

        :param description: The description of this InvestmentTransaction.
        :type description: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")  # noqa: E501

        self._description = description

    @property
    def debit_credit_memo(self):
        """Gets the debit_credit_memo of this InvestmentTransaction.


        :return: The debit_credit_memo of this InvestmentTransaction.
        :rtype: DebitCreditMemo
        """
        return self._debit_credit_memo

    @debit_credit_memo.setter
    def debit_credit_memo(self, debit_credit_memo):
        """Sets the debit_credit_memo of this InvestmentTransaction.


        :param debit_credit_memo: The debit_credit_memo of this InvestmentTransaction.
        :type debit_credit_memo: DebitCreditMemo
        """
        if debit_credit_memo is None:
            raise ValueError("Invalid value for `debit_credit_memo`, must not be `None`")  # noqa: E501

        self._debit_credit_memo = debit_credit_memo

    @property
    def category(self):
        """Gets the category of this InvestmentTransaction.

        Transaction category, preferably MCC or SIC. Plaid expects your organization to provide MCC, if available and applicable.   # noqa: E501

        :return: The category of this InvestmentTransaction.
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this InvestmentTransaction.

        Transaction category, preferably MCC or SIC. Plaid expects your organization to provide MCC, if available and applicable.   # noqa: E501

        :param category: The category of this InvestmentTransaction.
        :type category: str
        """

        self._category = category

    @property
    def sub_category(self):
        """Gets the sub_category of this InvestmentTransaction.

        Transaction category detail  # noqa: E501

        :return: The sub_category of this InvestmentTransaction.
        :rtype: str
        """
        return self._sub_category

    @sub_category.setter
    def sub_category(self, sub_category):
        """Sets the sub_category of this InvestmentTransaction.

        Transaction category detail  # noqa: E501

        :param sub_category: The sub_category of this InvestmentTransaction.
        :type sub_category: str
        """

        self._sub_category = sub_category

    @property
    def status(self):
        """Gets the status of this InvestmentTransaction.


        :return: The status of this InvestmentTransaction.
        :rtype: TransactionStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this InvestmentTransaction.


        :param status: The status of this InvestmentTransaction.
        :type status: TransactionStatus
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")  # noqa: E501

        self._status = status

    @property
    def amount(self):
        """Gets the amount of this InvestmentTransaction.

        The amount of money in the account currency  # noqa: E501

        :return: The amount of this InvestmentTransaction.
        :rtype: float
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this InvestmentTransaction.

        The amount of money in the account currency  # noqa: E501

        :param amount: The amount of this InvestmentTransaction.
        :type amount: float
        """
        if amount is None:
            raise ValueError("Invalid value for `amount`, must not be `None`")  # noqa: E501

        self._amount = amount

    @property
    def foreign_amount(self):
        """Gets the foreign_amount of this InvestmentTransaction.

        The amount of money in the foreign currency. If this amount is specified, then Plaid expects that the `foreignCurrency` property is also set.  # noqa: E501

        :return: The foreign_amount of this InvestmentTransaction.
        :rtype: float
        """
        return self._foreign_amount

    @foreign_amount.setter
    def foreign_amount(self, foreign_amount):
        """Sets the foreign_amount of this InvestmentTransaction.

        The amount of money in the foreign currency. If this amount is specified, then Plaid expects that the `foreignCurrency` property is also set.  # noqa: E501

        :param foreign_amount: The foreign_amount of this InvestmentTransaction.
        :type foreign_amount: float
        """

        self._foreign_amount = foreign_amount

    @property
    def foreign_currency(self):
        """Gets the foreign_currency of this InvestmentTransaction.


        :return: The foreign_currency of this InvestmentTransaction.
        :rtype: Iso4217Code
        """
        return self._foreign_currency

    @foreign_currency.setter
    def foreign_currency(self, foreign_currency):
        """Sets the foreign_currency of this InvestmentTransaction.


        :param foreign_currency: The foreign_currency of this InvestmentTransaction.
        :type foreign_currency: Iso4217Code
        """

        self._foreign_currency = foreign_currency

    @property
    def transaction_type(self):
        """Gets the transaction_type of this InvestmentTransaction.


        :return: The transaction_type of this InvestmentTransaction.
        :rtype: InvestmentTransactionType
        """
        return self._transaction_type

    @transaction_type.setter
    def transaction_type(self, transaction_type):
        """Sets the transaction_type of this InvestmentTransaction.


        :param transaction_type: The transaction_type of this InvestmentTransaction.
        :type transaction_type: InvestmentTransactionType
        """
        if transaction_type is None:
            raise ValueError("Invalid value for `transaction_type`, must not be `None`")  # noqa: E501

        self._transaction_type = transaction_type

    @property
    def security_id(self):
        """Gets the security_id of this InvestmentTransaction.

        Plaid requires this field and `securityIdType` for: - holding types that use security IDs, such as stocks and options. - transactions involving such holding types. If you return this for a holding, Plaid looks up the close price from NYSE Group Security Master using the security ID. If you don't return this for a holding that uses security IDs (not recommended), Plaid uses the `currentUnitPrice` you return as the close price.   # noqa: E501

        :return: The security_id of this InvestmentTransaction.
        :rtype: str
        """
        return self._security_id

    @security_id.setter
    def security_id(self, security_id):
        """Sets the security_id of this InvestmentTransaction.

        Plaid requires this field and `securityIdType` for: - holding types that use security IDs, such as stocks and options. - transactions involving such holding types. If you return this for a holding, Plaid looks up the close price from NYSE Group Security Master using the security ID. If you don't return this for a holding that uses security IDs (not recommended), Plaid uses the `currentUnitPrice` you return as the close price.   # noqa: E501

        :param security_id: The security_id of this InvestmentTransaction.
        :type security_id: str
        """

        self._security_id = security_id

    @property
    def security_id_type(self):
        """Gets the security_id_type of this InvestmentTransaction.


        :return: The security_id_type of this InvestmentTransaction.
        :rtype: SecurityIdType
        """
        return self._security_id_type

    @security_id_type.setter
    def security_id_type(self, security_id_type):
        """Sets the security_id_type of this InvestmentTransaction.


        :param security_id_type: The security_id_type of this InvestmentTransaction.
        :type security_id_type: SecurityIdType
        """

        self._security_id_type = security_id_type

    @property
    def security_type(self):
        """Gets the security_type of this InvestmentTransaction.


        :return: The security_type of this InvestmentTransaction.
        :rtype: SecurityType
        """
        return self._security_type

    @security_type.setter
    def security_type(self, security_type):
        """Sets the security_type of this InvestmentTransaction.


        :param security_type: The security_type of this InvestmentTransaction.
        :type security_type: SecurityType
        """

        self._security_type = security_type

    @property
    def symbol(self):
        """Gets the symbol of this InvestmentTransaction.

        Ticker symbol  # noqa: E501

        :return: The symbol of this InvestmentTransaction.
        :rtype: str
        """
        return self._symbol

    @symbol.setter
    def symbol(self, symbol):
        """Sets the symbol of this InvestmentTransaction.

        Ticker symbol  # noqa: E501

        :param symbol: The symbol of this InvestmentTransaction.
        :type symbol: str
        """

        self._symbol = symbol

    @property
    def commission(self):
        """Gets the commission of this InvestmentTransaction.

        Plaid expects that your organization includes a value for commission if the commission isn't included in `fees`.   # noqa: E501

        :return: The commission of this InvestmentTransaction.
        :rtype: float
        """
        return self._commission

    @commission.setter
    def commission(self, commission):
        """Sets the commission of this InvestmentTransaction.

        Plaid expects that your organization includes a value for commission if the commission isn't included in `fees`.   # noqa: E501

        :param commission: The commission of this InvestmentTransaction.
        :type commission: float
        """

        self._commission = commission

    @property
    def fees(self):
        """Gets the fees of this InvestmentTransaction.

        Fees applied to the trade. Plaid expects that the `fees` include the commission, unless your organization separately provides a value for `commission`.   # noqa: E501

        :return: The fees of this InvestmentTransaction.
        :rtype: float
        """
        return self._fees

    @fees.setter
    def fees(self, fees):
        """Sets the fees of this InvestmentTransaction.

        Fees applied to the trade. Plaid expects that the `fees` include the commission, unless your organization separately provides a value for `commission`.   # noqa: E501

        :param fees: The fees of this InvestmentTransaction.
        :type fees: float
        """
        if fees is None:
            raise ValueError("Invalid value for `fees`, must not be `None`")  # noqa: E501

        self._fees = fees

    @property
    def unit_price(self):
        """Gets the unit_price of this InvestmentTransaction.

        Unit price. Plaid uses this as the [price](https://plaid.com/docs/api/products/investments/#investments-transactions-get-response-investment-transactions-price). Plaid falls back to using this as the [close price](https://plaid.com/docs/api/products/investments/#investments-transactions-get-response-securities-close-price) if you don't return `securityId` for transactions involving securities.   # noqa: E501

        :return: The unit_price of this InvestmentTransaction.
        :rtype: float
        """
        return self._unit_price

    @unit_price.setter
    def unit_price(self, unit_price):
        """Sets the unit_price of this InvestmentTransaction.

        Unit price. Plaid uses this as the [price](https://plaid.com/docs/api/products/investments/#investments-transactions-get-response-investment-transactions-price). Plaid falls back to using this as the [close price](https://plaid.com/docs/api/products/investments/#investments-transactions-get-response-securities-close-price) if you don't return `securityId` for transactions involving securities.   # noqa: E501

        :param unit_price: The unit_price of this InvestmentTransaction.
        :type unit_price: float
        """

        self._unit_price = unit_price

    @property
    def units(self):
        """Gets the units of this InvestmentTransaction.

        Plaid requires this field for holdings and transactions involving securities. For security-based actions other than stock splits, quantity. Shares for stocks, mutual funds, and others. Face value for bonds. Contracts for options.   # noqa: E501

        :return: The units of this InvestmentTransaction.
        :rtype: float
        """
        return self._units

    @units.setter
    def units(self, units):
        """Sets the units of this InvestmentTransaction.

        Plaid requires this field for holdings and transactions involving securities. For security-based actions other than stock splits, quantity. Shares for stocks, mutual funds, and others. Face value for bonds. Contracts for options.   # noqa: E501

        :param units: The units of this InvestmentTransaction.
        :type units: float
        """

        self._units = units

    @property
    def unit_type(self):
        """Gets the unit_type of this InvestmentTransaction.


        :return: The unit_type of this InvestmentTransaction.
        :rtype: UnitType
        """
        return self._unit_type

    @unit_type.setter
    def unit_type(self, unit_type):
        """Sets the unit_type of this InvestmentTransaction.


        :param unit_type: The unit_type of this InvestmentTransaction.
        :type unit_type: UnitType
        """

        self._unit_type = unit_type

    @property
    def fi_attributes(self):
        """Gets the fi_attributes of this InvestmentTransaction.

        Array of financial institution-specific attributes. Plaid recommends including a value for [is_cash_equivalent](https://plaid.com/docs/api/products/investments/#investments-transactions-get-response-securities-is-cash-equivalent) property in this array. Plaid accepts `isCashEquivalent` as the name and a string `true` or `false` as the value.   # noqa: E501

        :return: The fi_attributes of this InvestmentTransaction.
        :rtype: List[FiAttribute]
        """
        return self._fi_attributes

    @fi_attributes.setter
    def fi_attributes(self, fi_attributes):
        """Sets the fi_attributes of this InvestmentTransaction.

        Array of financial institution-specific attributes. Plaid recommends including a value for [is_cash_equivalent](https://plaid.com/docs/api/products/investments/#investments-transactions-get-response-securities-is-cash-equivalent) property in this array. Plaid accepts `isCashEquivalent` as the name and a string `true` or `false` as the value.   # noqa: E501

        :param fi_attributes: The fi_attributes of this InvestmentTransaction.
        :type fi_attributes: List[FiAttribute]
        """

        self._fi_attributes = fi_attributes
