# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.fi_attribute import FiAttribute
from openapi_server.models.investment_transaction_type import InvestmentTransactionType
from openapi_server.models.security_id_type import SecurityIdType
from openapi_server.models.security_type import SecurityType
from openapi_server.models.unit_type import UnitType
from openapi_server import util

from openapi_server.models.fi_attribute import FiAttribute  # noqa: E501
from openapi_server.models.investment_transaction_type import InvestmentTransactionType  # noqa: E501
from openapi_server.models.security_id_type import SecurityIdType  # noqa: E501
from openapi_server.models.security_type import SecurityType  # noqa: E501
from openapi_server.models.unit_type import UnitType  # noqa: E501

class InvestmentTransactionAllOf(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, transaction_type=None, security_id=None, security_id_type=None, security_type=None, symbol=None, commission=None, fees=None, unit_price=None, units=None, unit_type=None, fi_attributes=None):  # noqa: E501
        """InvestmentTransactionAllOf - a model defined in OpenAPI

        :param transaction_type: The transaction_type of this InvestmentTransactionAllOf.  # noqa: E501
        :type transaction_type: InvestmentTransactionType
        :param security_id: The security_id of this InvestmentTransactionAllOf.  # noqa: E501
        :type security_id: str
        :param security_id_type: The security_id_type of this InvestmentTransactionAllOf.  # noqa: E501
        :type security_id_type: SecurityIdType
        :param security_type: The security_type of this InvestmentTransactionAllOf.  # noqa: E501
        :type security_type: SecurityType
        :param symbol: The symbol of this InvestmentTransactionAllOf.  # noqa: E501
        :type symbol: str
        :param commission: The commission of this InvestmentTransactionAllOf.  # noqa: E501
        :type commission: float
        :param fees: The fees of this InvestmentTransactionAllOf.  # noqa: E501
        :type fees: float
        :param unit_price: The unit_price of this InvestmentTransactionAllOf.  # noqa: E501
        :type unit_price: float
        :param units: The units of this InvestmentTransactionAllOf.  # noqa: E501
        :type units: float
        :param unit_type: The unit_type of this InvestmentTransactionAllOf.  # noqa: E501
        :type unit_type: UnitType
        :param fi_attributes: The fi_attributes of this InvestmentTransactionAllOf.  # noqa: E501
        :type fi_attributes: List[FiAttribute]
        """
        self.openapi_types = {
            'transaction_type': InvestmentTransactionType,
            'security_id': str,
            'security_id_type': SecurityIdType,
            'security_type': SecurityType,
            'symbol': str,
            'commission': float,
            'fees': float,
            'unit_price': float,
            'units': float,
            'unit_type': UnitType,
            'fi_attributes': List[FiAttribute]
        }

        self.attribute_map = {
            'transaction_type': 'transactionType',
            'security_id': 'securityId',
            'security_id_type': 'securityIdType',
            'security_type': 'securityType',
            'symbol': 'symbol',
            'commission': 'commission',
            'fees': 'fees',
            'unit_price': 'unitPrice',
            'units': 'units',
            'unit_type': 'unitType',
            'fi_attributes': 'fiAttributes'
        }

        self._transaction_type = transaction_type
        self._security_id = security_id
        self._security_id_type = security_id_type
        self._security_type = security_type
        self._symbol = symbol
        self._commission = commission
        self._fees = fees
        self._unit_price = unit_price
        self._units = units
        self._unit_type = unit_type
        self._fi_attributes = fi_attributes

    @classmethod
    def from_dict(cls, dikt) -> 'InvestmentTransactionAllOf':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The InvestmentTransaction_allOf of this InvestmentTransactionAllOf.  # noqa: E501
        :rtype: InvestmentTransactionAllOf
        """
        return util.deserialize_model(dikt, cls)

    @property
    def transaction_type(self):
        """Gets the transaction_type of this InvestmentTransactionAllOf.


        :return: The transaction_type of this InvestmentTransactionAllOf.
        :rtype: InvestmentTransactionType
        """
        return self._transaction_type

    @transaction_type.setter
    def transaction_type(self, transaction_type):
        """Sets the transaction_type of this InvestmentTransactionAllOf.


        :param transaction_type: The transaction_type of this InvestmentTransactionAllOf.
        :type transaction_type: InvestmentTransactionType
        """
        if transaction_type is None:
            raise ValueError("Invalid value for `transaction_type`, must not be `None`")  # noqa: E501

        self._transaction_type = transaction_type

    @property
    def security_id(self):
        """Gets the security_id of this InvestmentTransactionAllOf.

        Plaid requires this field and `securityIdType` for: - holding types that use security IDs, such as stocks and options. - transactions involving such holding types. If you return this for a holding, Plaid looks up the close price from NYSE Group Security Master using the security ID. If you don't return this for a holding that uses security IDs (not recommended), Plaid uses the `currentUnitPrice` you return as the close price.   # noqa: E501

        :return: The security_id of this InvestmentTransactionAllOf.
        :rtype: str
        """
        return self._security_id

    @security_id.setter
    def security_id(self, security_id):
        """Sets the security_id of this InvestmentTransactionAllOf.

        Plaid requires this field and `securityIdType` for: - holding types that use security IDs, such as stocks and options. - transactions involving such holding types. If you return this for a holding, Plaid looks up the close price from NYSE Group Security Master using the security ID. If you don't return this for a holding that uses security IDs (not recommended), Plaid uses the `currentUnitPrice` you return as the close price.   # noqa: E501

        :param security_id: The security_id of this InvestmentTransactionAllOf.
        :type security_id: str
        """

        self._security_id = security_id

    @property
    def security_id_type(self):
        """Gets the security_id_type of this InvestmentTransactionAllOf.


        :return: The security_id_type of this InvestmentTransactionAllOf.
        :rtype: SecurityIdType
        """
        return self._security_id_type

    @security_id_type.setter
    def security_id_type(self, security_id_type):
        """Sets the security_id_type of this InvestmentTransactionAllOf.


        :param security_id_type: The security_id_type of this InvestmentTransactionAllOf.
        :type security_id_type: SecurityIdType
        """

        self._security_id_type = security_id_type

    @property
    def security_type(self):
        """Gets the security_type of this InvestmentTransactionAllOf.


        :return: The security_type of this InvestmentTransactionAllOf.
        :rtype: SecurityType
        """
        return self._security_type

    @security_type.setter
    def security_type(self, security_type):
        """Sets the security_type of this InvestmentTransactionAllOf.


        :param security_type: The security_type of this InvestmentTransactionAllOf.
        :type security_type: SecurityType
        """

        self._security_type = security_type

    @property
    def symbol(self):
        """Gets the symbol of this InvestmentTransactionAllOf.

        Ticker symbol  # noqa: E501

        :return: The symbol of this InvestmentTransactionAllOf.
        :rtype: str
        """
        return self._symbol

    @symbol.setter
    def symbol(self, symbol):
        """Sets the symbol of this InvestmentTransactionAllOf.

        Ticker symbol  # noqa: E501

        :param symbol: The symbol of this InvestmentTransactionAllOf.
        :type symbol: str
        """

        self._symbol = symbol

    @property
    def commission(self):
        """Gets the commission of this InvestmentTransactionAllOf.

        Plaid expects that your organization includes a value for commission if the commission isn't included in `fees`.   # noqa: E501

        :return: The commission of this InvestmentTransactionAllOf.
        :rtype: float
        """
        return self._commission

    @commission.setter
    def commission(self, commission):
        """Sets the commission of this InvestmentTransactionAllOf.

        Plaid expects that your organization includes a value for commission if the commission isn't included in `fees`.   # noqa: E501

        :param commission: The commission of this InvestmentTransactionAllOf.
        :type commission: float
        """

        self._commission = commission

    @property
    def fees(self):
        """Gets the fees of this InvestmentTransactionAllOf.

        Fees applied to the trade. Plaid expects that the `fees` include the commission, unless your organization separately provides a value for `commission`.   # noqa: E501

        :return: The fees of this InvestmentTransactionAllOf.
        :rtype: float
        """
        return self._fees

    @fees.setter
    def fees(self, fees):
        """Sets the fees of this InvestmentTransactionAllOf.

        Fees applied to the trade. Plaid expects that the `fees` include the commission, unless your organization separately provides a value for `commission`.   # noqa: E501

        :param fees: The fees of this InvestmentTransactionAllOf.
        :type fees: float
        """
        if fees is None:
            raise ValueError("Invalid value for `fees`, must not be `None`")  # noqa: E501

        self._fees = fees

    @property
    def unit_price(self):
        """Gets the unit_price of this InvestmentTransactionAllOf.

        Unit price. Plaid uses this as the [price](https://plaid.com/docs/api/products/investments/#investments-transactions-get-response-investment-transactions-price). Plaid falls back to using this as the [close price](https://plaid.com/docs/api/products/investments/#investments-transactions-get-response-securities-close-price) if you don't return `securityId` for transactions involving securities.   # noqa: E501

        :return: The unit_price of this InvestmentTransactionAllOf.
        :rtype: float
        """
        return self._unit_price

    @unit_price.setter
    def unit_price(self, unit_price):
        """Sets the unit_price of this InvestmentTransactionAllOf.

        Unit price. Plaid uses this as the [price](https://plaid.com/docs/api/products/investments/#investments-transactions-get-response-investment-transactions-price). Plaid falls back to using this as the [close price](https://plaid.com/docs/api/products/investments/#investments-transactions-get-response-securities-close-price) if you don't return `securityId` for transactions involving securities.   # noqa: E501

        :param unit_price: The unit_price of this InvestmentTransactionAllOf.
        :type unit_price: float
        """

        self._unit_price = unit_price

    @property
    def units(self):
        """Gets the units of this InvestmentTransactionAllOf.

        Plaid requires this field for holdings and transactions involving securities. For security-based actions other than stock splits, quantity. Shares for stocks, mutual funds, and others. Face value for bonds. Contracts for options.   # noqa: E501

        :return: The units of this InvestmentTransactionAllOf.
        :rtype: float
        """
        return self._units

    @units.setter
    def units(self, units):
        """Sets the units of this InvestmentTransactionAllOf.

        Plaid requires this field for holdings and transactions involving securities. For security-based actions other than stock splits, quantity. Shares for stocks, mutual funds, and others. Face value for bonds. Contracts for options.   # noqa: E501

        :param units: The units of this InvestmentTransactionAllOf.
        :type units: float
        """

        self._units = units

    @property
    def unit_type(self):
        """Gets the unit_type of this InvestmentTransactionAllOf.


        :return: The unit_type of this InvestmentTransactionAllOf.
        :rtype: UnitType
        """
        return self._unit_type

    @unit_type.setter
    def unit_type(self, unit_type):
        """Sets the unit_type of this InvestmentTransactionAllOf.


        :param unit_type: The unit_type of this InvestmentTransactionAllOf.
        :type unit_type: UnitType
        """

        self._unit_type = unit_type

    @property
    def fi_attributes(self):
        """Gets the fi_attributes of this InvestmentTransactionAllOf.

        Array of financial institution-specific attributes. Plaid recommends including a value for [is_cash_equivalent](https://plaid.com/docs/api/products/investments/#investments-transactions-get-response-securities-is-cash-equivalent) property in this array. Plaid accepts `isCashEquivalent` as the name and a string `true` or `false` as the value.   # noqa: E501

        :return: The fi_attributes of this InvestmentTransactionAllOf.
        :rtype: List[FiAttribute]
        """
        return self._fi_attributes

    @fi_attributes.setter
    def fi_attributes(self, fi_attributes):
        """Sets the fi_attributes of this InvestmentTransactionAllOf.

        Array of financial institution-specific attributes. Plaid recommends including a value for [is_cash_equivalent](https://plaid.com/docs/api/products/investments/#investments-transactions-get-response-securities-is-cash-equivalent) property in this array. Plaid accepts `isCashEquivalent` as the name and a string `true` or `false` as the value.   # noqa: E501

        :param fi_attributes: The fi_attributes of this InvestmentTransactionAllOf.
        :type fi_attributes: List[FiAttribute]
        """

        self._fi_attributes = fi_attributes
