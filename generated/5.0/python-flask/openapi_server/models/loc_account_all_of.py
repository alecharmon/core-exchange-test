# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server import util


class LocAccountAllOf(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, credit_line=None, available_credit=None, next_payment_amount=None, next_payment_date=None, principal_balance=None, current_balance=None, minimum_payment_amount=None, last_payment_amount=None, last_payment_date=None, past_due_amount=None, last_stmt_balance=None, last_stmt_date=None, purchases_apr=None, advances_apr=None):  # noqa: E501
        """LocAccountAllOf - a model defined in OpenAPI

        :param credit_line: The credit_line of this LocAccountAllOf.  # noqa: E501
        :type credit_line: float
        :param available_credit: The available_credit of this LocAccountAllOf.  # noqa: E501
        :type available_credit: float
        :param next_payment_amount: The next_payment_amount of this LocAccountAllOf.  # noqa: E501
        :type next_payment_amount: float
        :param next_payment_date: The next_payment_date of this LocAccountAllOf.  # noqa: E501
        :type next_payment_date: date
        :param principal_balance: The principal_balance of this LocAccountAllOf.  # noqa: E501
        :type principal_balance: float
        :param current_balance: The current_balance of this LocAccountAllOf.  # noqa: E501
        :type current_balance: float
        :param minimum_payment_amount: The minimum_payment_amount of this LocAccountAllOf.  # noqa: E501
        :type minimum_payment_amount: float
        :param last_payment_amount: The last_payment_amount of this LocAccountAllOf.  # noqa: E501
        :type last_payment_amount: float
        :param last_payment_date: The last_payment_date of this LocAccountAllOf.  # noqa: E501
        :type last_payment_date: date
        :param past_due_amount: The past_due_amount of this LocAccountAllOf.  # noqa: E501
        :type past_due_amount: float
        :param last_stmt_balance: The last_stmt_balance of this LocAccountAllOf.  # noqa: E501
        :type last_stmt_balance: float
        :param last_stmt_date: The last_stmt_date of this LocAccountAllOf.  # noqa: E501
        :type last_stmt_date: date
        :param purchases_apr: The purchases_apr of this LocAccountAllOf.  # noqa: E501
        :type purchases_apr: float
        :param advances_apr: The advances_apr of this LocAccountAllOf.  # noqa: E501
        :type advances_apr: float
        """
        self.openapi_types = {
            'credit_line': float,
            'available_credit': float,
            'next_payment_amount': float,
            'next_payment_date': date,
            'principal_balance': float,
            'current_balance': float,
            'minimum_payment_amount': float,
            'last_payment_amount': float,
            'last_payment_date': date,
            'past_due_amount': float,
            'last_stmt_balance': float,
            'last_stmt_date': date,
            'purchases_apr': float,
            'advances_apr': float
        }

        self.attribute_map = {
            'credit_line': 'creditLine',
            'available_credit': 'availableCredit',
            'next_payment_amount': 'nextPaymentAmount',
            'next_payment_date': 'nextPaymentDate',
            'principal_balance': 'principalBalance',
            'current_balance': 'currentBalance',
            'minimum_payment_amount': 'minimumPaymentAmount',
            'last_payment_amount': 'lastPaymentAmount',
            'last_payment_date': 'lastPaymentDate',
            'past_due_amount': 'pastDueAmount',
            'last_stmt_balance': 'lastStmtBalance',
            'last_stmt_date': 'lastStmtDate',
            'purchases_apr': 'purchasesApr',
            'advances_apr': 'advancesApr'
        }

        self._credit_line = credit_line
        self._available_credit = available_credit
        self._next_payment_amount = next_payment_amount
        self._next_payment_date = next_payment_date
        self._principal_balance = principal_balance
        self._current_balance = current_balance
        self._minimum_payment_amount = minimum_payment_amount
        self._last_payment_amount = last_payment_amount
        self._last_payment_date = last_payment_date
        self._past_due_amount = past_due_amount
        self._last_stmt_balance = last_stmt_balance
        self._last_stmt_date = last_stmt_date
        self._purchases_apr = purchases_apr
        self._advances_apr = advances_apr

    @classmethod
    def from_dict(cls, dikt) -> 'LocAccountAllOf':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The LocAccount_allOf of this LocAccountAllOf.  # noqa: E501
        :rtype: LocAccountAllOf
        """
        return util.deserialize_model(dikt, cls)

    @property
    def credit_line(self):
        """Gets the credit_line of this LocAccountAllOf.

        Credit limit  # noqa: E501

        :return: The credit_line of this LocAccountAllOf.
        :rtype: float
        """
        return self._credit_line

    @credit_line.setter
    def credit_line(self, credit_line):
        """Sets the credit_line of this LocAccountAllOf.

        Credit limit  # noqa: E501

        :param credit_line: The credit_line of this LocAccountAllOf.
        :type credit_line: float
        """

        self._credit_line = credit_line

    @property
    def available_credit(self):
        """Gets the available_credit of this LocAccountAllOf.

        Available credit  # noqa: E501

        :return: The available_credit of this LocAccountAllOf.
        :rtype: float
        """
        return self._available_credit

    @available_credit.setter
    def available_credit(self, available_credit):
        """Sets the available_credit of this LocAccountAllOf.

        Available credit  # noqa: E501

        :param available_credit: The available_credit of this LocAccountAllOf.
        :type available_credit: float
        """
        if available_credit is None:
            raise ValueError("Invalid value for `available_credit`, must not be `None`")  # noqa: E501

        self._available_credit = available_credit

    @property
    def next_payment_amount(self):
        """Gets the next_payment_amount of this LocAccountAllOf.

        Amount of next payment.  # noqa: E501

        :return: The next_payment_amount of this LocAccountAllOf.
        :rtype: float
        """
        return self._next_payment_amount

    @next_payment_amount.setter
    def next_payment_amount(self, next_payment_amount):
        """Sets the next_payment_amount of this LocAccountAllOf.

        Amount of next payment.  # noqa: E501

        :param next_payment_amount: The next_payment_amount of this LocAccountAllOf.
        :type next_payment_amount: float
        """

        self._next_payment_amount = next_payment_amount

    @property
    def next_payment_date(self):
        """Gets the next_payment_date of this LocAccountAllOf.

        ISO 8601 full-date in format 'YYYY-MM-DD' according to [IETF RFC3339](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#anchor14)  # noqa: E501

        :return: The next_payment_date of this LocAccountAllOf.
        :rtype: date
        """
        return self._next_payment_date

    @next_payment_date.setter
    def next_payment_date(self, next_payment_date):
        """Sets the next_payment_date of this LocAccountAllOf.

        ISO 8601 full-date in format 'YYYY-MM-DD' according to [IETF RFC3339](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#anchor14)  # noqa: E501

        :param next_payment_date: The next_payment_date of this LocAccountAllOf.
        :type next_payment_date: date
        """
        if next_payment_date is not None and len(next_payment_date) > 10:
            raise ValueError("Invalid value for `next_payment_date`, length must be less than or equal to `10`")  # noqa: E501

        self._next_payment_date = next_payment_date

    @property
    def principal_balance(self):
        """Gets the principal_balance of this LocAccountAllOf.

        Principal balance.  # noqa: E501

        :return: The principal_balance of this LocAccountAllOf.
        :rtype: float
        """
        return self._principal_balance

    @principal_balance.setter
    def principal_balance(self, principal_balance):
        """Sets the principal_balance of this LocAccountAllOf.

        Principal balance.  # noqa: E501

        :param principal_balance: The principal_balance of this LocAccountAllOf.
        :type principal_balance: float
        """

        self._principal_balance = principal_balance

    @property
    def current_balance(self):
        """Gets the current_balance of this LocAccountAllOf.

        Current balance of the line of credit.  # noqa: E501

        :return: The current_balance of this LocAccountAllOf.
        :rtype: float
        """
        return self._current_balance

    @current_balance.setter
    def current_balance(self, current_balance):
        """Sets the current_balance of this LocAccountAllOf.

        Current balance of the line of credit.  # noqa: E501

        :param current_balance: The current_balance of this LocAccountAllOf.
        :type current_balance: float
        """
        if current_balance is None:
            raise ValueError("Invalid value for `current_balance`, must not be `None`")  # noqa: E501

        self._current_balance = current_balance

    @property
    def minimum_payment_amount(self):
        """Gets the minimum_payment_amount of this LocAccountAllOf.

        Minimum payment amount.  # noqa: E501

        :return: The minimum_payment_amount of this LocAccountAllOf.
        :rtype: float
        """
        return self._minimum_payment_amount

    @minimum_payment_amount.setter
    def minimum_payment_amount(self, minimum_payment_amount):
        """Sets the minimum_payment_amount of this LocAccountAllOf.

        Minimum payment amount.  # noqa: E501

        :param minimum_payment_amount: The minimum_payment_amount of this LocAccountAllOf.
        :type minimum_payment_amount: float
        """

        self._minimum_payment_amount = minimum_payment_amount

    @property
    def last_payment_amount(self):
        """Gets the last_payment_amount of this LocAccountAllOf.

        Last payment amount.  # noqa: E501

        :return: The last_payment_amount of this LocAccountAllOf.
        :rtype: float
        """
        return self._last_payment_amount

    @last_payment_amount.setter
    def last_payment_amount(self, last_payment_amount):
        """Sets the last_payment_amount of this LocAccountAllOf.

        Last payment amount.  # noqa: E501

        :param last_payment_amount: The last_payment_amount of this LocAccountAllOf.
        :type last_payment_amount: float
        """

        self._last_payment_amount = last_payment_amount

    @property
    def last_payment_date(self):
        """Gets the last_payment_date of this LocAccountAllOf.

        ISO 8601 full-date in format 'YYYY-MM-DD' according to [IETF RFC3339](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#anchor14)  # noqa: E501

        :return: The last_payment_date of this LocAccountAllOf.
        :rtype: date
        """
        return self._last_payment_date

    @last_payment_date.setter
    def last_payment_date(self, last_payment_date):
        """Sets the last_payment_date of this LocAccountAllOf.

        ISO 8601 full-date in format 'YYYY-MM-DD' according to [IETF RFC3339](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#anchor14)  # noqa: E501

        :param last_payment_date: The last_payment_date of this LocAccountAllOf.
        :type last_payment_date: date
        """
        if last_payment_date is not None and len(last_payment_date) > 10:
            raise ValueError("Invalid value for `last_payment_date`, length must be less than or equal to `10`")  # noqa: E501

        self._last_payment_date = last_payment_date

    @property
    def past_due_amount(self):
        """Gets the past_due_amount of this LocAccountAllOf.

        Amount owed that the account holder failed to pay on the due date.  # noqa: E501

        :return: The past_due_amount of this LocAccountAllOf.
        :rtype: float
        """
        return self._past_due_amount

    @past_due_amount.setter
    def past_due_amount(self, past_due_amount):
        """Sets the past_due_amount of this LocAccountAllOf.

        Amount owed that the account holder failed to pay on the due date.  # noqa: E501

        :param past_due_amount: The past_due_amount of this LocAccountAllOf.
        :type past_due_amount: float
        """

        self._past_due_amount = past_due_amount

    @property
    def last_stmt_balance(self):
        """Gets the last_stmt_balance of this LocAccountAllOf.

        Last Statement Balance.  # noqa: E501

        :return: The last_stmt_balance of this LocAccountAllOf.
        :rtype: float
        """
        return self._last_stmt_balance

    @last_stmt_balance.setter
    def last_stmt_balance(self, last_stmt_balance):
        """Sets the last_stmt_balance of this LocAccountAllOf.

        Last Statement Balance.  # noqa: E501

        :param last_stmt_balance: The last_stmt_balance of this LocAccountAllOf.
        :type last_stmt_balance: float
        """

        self._last_stmt_balance = last_stmt_balance

    @property
    def last_stmt_date(self):
        """Gets the last_stmt_date of this LocAccountAllOf.

        ISO 8601 full-date in format 'YYYY-MM-DD' according to [IETF RFC3339](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#anchor14)  # noqa: E501

        :return: The last_stmt_date of this LocAccountAllOf.
        :rtype: date
        """
        return self._last_stmt_date

    @last_stmt_date.setter
    def last_stmt_date(self, last_stmt_date):
        """Sets the last_stmt_date of this LocAccountAllOf.

        ISO 8601 full-date in format 'YYYY-MM-DD' according to [IETF RFC3339](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#anchor14)  # noqa: E501

        :param last_stmt_date: The last_stmt_date of this LocAccountAllOf.
        :type last_stmt_date: date
        """
        if last_stmt_date is not None and len(last_stmt_date) > 10:
            raise ValueError("Invalid value for `last_stmt_date`, length must be less than or equal to `10`")  # noqa: E501

        self._last_stmt_date = last_stmt_date

    @property
    def purchases_apr(self):
        """Gets the purchases_apr of this LocAccountAllOf.

        Purchases APR  # noqa: E501

        :return: The purchases_apr of this LocAccountAllOf.
        :rtype: float
        """
        return self._purchases_apr

    @purchases_apr.setter
    def purchases_apr(self, purchases_apr):
        """Sets the purchases_apr of this LocAccountAllOf.

        Purchases APR  # noqa: E501

        :param purchases_apr: The purchases_apr of this LocAccountAllOf.
        :type purchases_apr: float
        """

        self._purchases_apr = purchases_apr

    @property
    def advances_apr(self):
        """Gets the advances_apr of this LocAccountAllOf.

        Advances APR  # noqa: E501

        :return: The advances_apr of this LocAccountAllOf.
        :rtype: float
        """
        return self._advances_apr

    @advances_apr.setter
    def advances_apr(self, advances_apr):
        """Sets the advances_apr of this LocAccountAllOf.

        Advances APR  # noqa: E501

        :param advances_apr: The advances_apr of this LocAccountAllOf.
        :type advances_apr: float
        """

        self._advances_apr = advances_apr
