# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.one_ofobjectobjectobjectobject import OneOfobjectobjectobjectobject
from openapi_server.models.page_metadata import PageMetadata
from openapi_server import util

from openapi_server.models.one_ofobjectobjectobjectobject import OneOfobjectobjectobjectobject  # noqa: E501
from openapi_server.models.page_metadata import PageMetadata  # noqa: E501

class Transactions(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, page=None, transactions=None):  # noqa: E501
        """Transactions - a model defined in OpenAPI

        :param page: The page of this Transactions.  # noqa: E501
        :type page: PageMetadata
        :param transactions: The transactions of this Transactions.  # noqa: E501
        :type transactions: List[OneOfobjectobjectobjectobject]
        """
        self.openapi_types = {
            'page': PageMetadata,
            'transactions': List[OneOfobjectobjectobjectobject]
        }

        self.attribute_map = {
            'page': 'page',
            'transactions': 'transactions'
        }

        self._page = page
        self._transactions = transactions

    @classmethod
    def from_dict(cls, dikt) -> 'Transactions':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Transactions of this Transactions.  # noqa: E501
        :rtype: Transactions
        """
        return util.deserialize_model(dikt, cls)

    @property
    def page(self):
        """Gets the page of this Transactions.


        :return: The page of this Transactions.
        :rtype: PageMetadata
        """
        return self._page

    @page.setter
    def page(self, page):
        """Sets the page of this Transactions.


        :param page: The page of this Transactions.
        :type page: PageMetadata
        """

        self._page = page

    @property
    def transactions(self):
        """Gets the transactions of this Transactions.

        An array of transactions with entity type dependent on the account type.  Plaid expects your organization to return an empty array if this information isn't available. Plaid consumes solely investment, deposit, loan, and line of credit transactions.   # noqa: E501

        :return: The transactions of this Transactions.
        :rtype: List[OneOfobjectobjectobjectobject]
        """
        return self._transactions

    @transactions.setter
    def transactions(self, transactions):
        """Sets the transactions of this Transactions.

        An array of transactions with entity type dependent on the account type.  Plaid expects your organization to return an empty array if this information isn't available. Plaid consumes solely investment, deposit, loan, and line of credit transactions.   # noqa: E501

        :param transactions: The transactions of this Transactions.
        :type transactions: List[OneOfobjectobjectobjectobject]
        """
        if transactions is None:
            raise ValueError("Invalid value for `transactions`, must not be `None`")  # noqa: E501

        self._transactions = transactions
